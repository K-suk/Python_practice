# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # print("Hello world")
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # print("Japan is gonna be qualified")
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # k = int(input())
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # h = 21
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # m = 0
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # h += k // 60
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # m += k % 60
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # if m >= 10:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     print(f'{h}:{m}')
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # else:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     print(f'{h}:0{m}')

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # A,B=map(int,input().split())
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # print(A|B)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # x,y,z = map(int, input().split())
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # if x > 0 and y > 0:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     if x < y:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         print(x)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     elif z < y:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         if z < 0:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             print(abs(z)*2+x)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         else:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             print(x)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     else:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         print(-1)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # elif x > 0 and y < 0:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     print(x)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # elif x < 0 and y > 0:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     print(abs(x))
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # else:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     if x > y:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         print(abs(x))
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     elif z > y:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         if z > 0:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             print(z*2+abs(x))
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         else:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             print(x)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     else:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         print(-1)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # ans = []
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # def dfs(now,pre):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     global ans
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     global done
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     ans.append(now)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     done[now] = True
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     print(ans)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     for to in connected[now]:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         print(ans)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         print(to, now, pre)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         if to != pre:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             dfs(to,now)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             ans.append(now)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             done[now] = True
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         elif to == y:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             ans.append(to)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             print(*ans)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             exit()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         else:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             ans.pop(-1)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # n,x,y = map(int, input().split())
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # connected = [[] for i in range(n+1)]
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # done = [False for i in range(n+1)]
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # for i in range(n-1):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     u,v = map(int, input().split())
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     connected[u].append(v)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     connected[v].append(u)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # print(connected)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # dfs(x,-1)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # n,x,y = map(int, input().split())
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # connect = [[] for i in range(n+1)]
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # for i in range(n-1):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     u,v = map(int, (input().split()))
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     connect[u].append(v)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     connect[v].append(u)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # dist = [-1]*(n+1)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # dist[x] = 0
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # from collections import deque
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # q = deque()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # q.append(x)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # while len(q) > 0:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     now = q.popleft()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     for to in connect[now]:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         if dist[to] == -1:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             dist[to] = dist[now]+1
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             q.append(to)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # ans = deque()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # cnt = dist[y]
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # now = y
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # while 0 < cnt:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     ans.appendleft(now)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     for to in connect[now]:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         if dist[to] == cnt-1:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             cnt -= 1
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             now = to
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # ans.appendleft(x)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # print(*ans)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # n = int(input())
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # chars = "ABCDEF"
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # ans = ""
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # while n > 0:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     tmp = n % 16
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     n //= 16
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     if tmp > 9:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         ans += chars[tmp-10]
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     else:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         ans += str(tmp)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # ans = ans[::-1]
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # if len(ans) < 2:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     ans = "0" + ans
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # if len(ans) < 2:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     ans = "0" + ans
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # print(ans)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # n,q = map(int, input().split())
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # grids = []
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # for i in range(n):  
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     l,*a = tuple(map(int, input().split()))
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     grids.append(a)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # for i in range(q):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     s,t = map(int, input().split())
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     print(grids[s-1][t-1])

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # n = int(input())
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # alist = list(map(int, input().split()))
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # alist = set(alist)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # leng = len(alist)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # double = n-leng
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # for i in range(1,10**9+1):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     if i in alist:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         leng -= 1
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     else:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         if double > 1:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             double -= 2
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         else:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             if leng > 1:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #                 leng -= 2
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #                 alist = set(list(alist)[:n-2])
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #                 n -= 2
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             else:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #                 print(i-1)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #                 exit()

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # n = int(input())
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # alist = list(map(int, input().split()))
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # print(sum(alist))

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # n,m = map(int, input().split())
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # connected = [[] for i in range(n)]
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # for i in range(m):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     k,*X = map(int, input().split())
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     for x in X:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         for j in X:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             connected[x-1].append(j)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # ans = set([i for i in range(1,n+1)])
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # for connect in connected:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     if set(connect) != ans:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         print("no")
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         exit()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # print("Yes")

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # n = int(input())
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # alist = list(map(int, input().split()))
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # odd = []
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # even = []
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # for a in alist:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     if a % 2 == 0:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         even.append(a)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     else:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         odd.append(a)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # ans = -1
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # odd.sort()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # even.sort()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # if len(odd) > 1:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     ans = max(ans,odd[-1]+odd[-2])
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # if len(even) > 1:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     ans = max(ans,even[-1]+even[-2])
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # print(ans)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # def recur(n):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     if n == 0:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         ans = 1
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     else:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         ans = n*recur(n-1)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     return ans
    
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # n = int(input())
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # print(recur(n))

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # x,k = input().split()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # X = x[::-1]
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # k = int(k)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # xlist = []
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # for x in X:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     xlist.append(int(x))
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # for i in range(k):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     if xlist[i] > 4:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         xlist[i] = 0
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         tmp = i
        
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # a,b = map(int, input().split())
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # ans = round(b/a,3)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # print('{:.03f}'.format(ans))

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # h,w = map(int, input().split())
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Clist = []
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # for i in range(h):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     tmp = list(input())
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     Clist.append(tmp)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # ans = []
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # for i in range(w):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     cnt = 0
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     for j in range(h):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         if Clist[j][i] == '#':
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             cnt += 1
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     ans.append(cnt)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # print(*ans)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # アプローチは合ってる
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # n = int(input())
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # alist = list(map(int, input().split()))
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # connected = [[] for i in range(n*2+1)]
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # for i in range(n):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     connected[(i+1)*2-1].append(alist[i]-1)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     connected[(i+1)*2].append(alist[i]-1)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # for i in range(n*2+1):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     tmp = i
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     cnt = 0
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     while connected[tmp]:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         tmp = connected[tmp][0]
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         cnt += 1
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     print(cnt)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # n=int(input())
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # alist=[0]+list(map(int,input().split()))

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # ans=[0]*(2*n+2)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # for i in range(1,n+1):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     ans[2*i]=ans[alist[i]]+1
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     ans[2*i+1]=ans[alist[i]]+1
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # for i in range(1,2*n+2):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     print(ans[i])

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # n = int(input())
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # H = list(map(int, input().split()))
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # print(H.index(max(H))+1)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # MOD = 998244353 
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # a,b,c,d,e,f = map(int, input().split())
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # print((a*b*c-d*e*f)%MOD)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # grids = []
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # for i in range(9):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     g_line = list(input())
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     grids.append(g_line)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # cnt = 0
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # for ay in range(9):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     for ax in range(9):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         for by in range(ay,9):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             for bx in range(ax+1,9):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #                 if grids[ay][ax] == '#' and grids[by][bx] == '#':
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #                     cy = by+(bx-ax)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #                     cx = bx-(by-ay)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #                     dy = cy-(bx-cx)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #                     dx = cx-(cy-by)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #                     if 0<=cy<=8 and 0<=dy<=8 and 0<=cx<=8 and 0<=dx<=8:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #                         if grids[cy][cx] == '#' and grids[dy][dx] == '#':
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #                             cnt += 1
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # print(cnt)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # S = input()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # ans = -1
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # for i,s in enumerate(S):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     if s == 'a':
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         ans = i+1
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # print(ans)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # n,m = map(int, input().split())
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # connected = [[] for i in range(n+1)]
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # for i in range(m):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     a,b = map(int, input().split())
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     connected[a].append(b)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     connected[b].append(a)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # for i in range(1,n+1):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     print(len(connected[i]), *sorted(connected[i]))

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # from itertools import permutations
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # n = int(input())
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # P = tuple(map(int, input().split()))
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # prev = (0,0,0)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # for i in permutations(list(i for i in range(1,n+1))):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     if i == P:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         print(*prev)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         exit()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     prev = i

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # N=int(input())
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # A=list(map(int,input().split()))

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # for i in range(N-2,-1,-1):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     if A[i]>A[i+1]:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         for d in range(1,N):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             for k in range(i+1,N):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #                 if A[i]-A[k]==d:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #                     A[i],A[k]=A[k],A[i]
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #                     x=A[:i+1]
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #                     y=A[i+1:]
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #                     y.sort(reverse=True)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #                     print(*x+y)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #                     exit()

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # from collections import deque,defaultdict
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # N = int(input())
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # connected=defaultdict(list)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # for i in range(N):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     a,b = map(int, input().split())
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     connected[a].append(b)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     connected[b].append(a)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # higheset = 1
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # visited = defaultdict(int)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # q = deque()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # q.append(1)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # while len(q) > 0:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     now = q.popleft()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     if now > higheset:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         higheset = now
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     for to in connected[now]:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         if visited[to] == 0:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             visited[to] = 1
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             q.append(to)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # print(higheset)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # n,x = map(int, input().split())
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # plist = list(map(int, input().split()))
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # print(plist.index(x)+1)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # n = int(input())
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # S = [input() for _ in range(n)]
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # if n != len(set(S)):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     print("No")
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     exit()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # first = ['H','D','C','S']
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # sec = ['A','2','3','4','5','6','7','8','9','T','J','Q','K']
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # for s in S:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     if s[0] not in first:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         print("No")
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         exit()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     if s[1] not in sec:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         print("No")
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         exit()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # print("Yes")

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # from collections import defaultdict
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # N,Q = map(int, input().split())
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # connected = defaultdict(int)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # for i in range(Q):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     t,a,b = map(int, input().split())
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     if t == 1:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         connected[(a,b)] = 1
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     elif t == 2:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         connected[(a,b)] = 0
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     else:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         if connected[(a,b)] == 1 and connected[(b,a)] == 1:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             print("Yes")
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         else:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             print("No")

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # h,w = map(int, input().split())
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # S = []
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # for i in range(h):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     s_line = list(input())
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     S.append(s_line)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # T = []
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # for i in range(h):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     t_line = list(input())
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     T.append(t_line)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # S.sort()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # T.sort()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # for i in range(h):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     if S[i].count('#') != T[i].count('#'):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         print("No")
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         exit()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # print("Yes")
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # print(S,T)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # if S == T:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     print("Yes")
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # else:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     print("No")

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 入力の受け取り
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # H,W=map(int,input().split())

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Sの記録
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # S=[]
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # i~0~(H-1)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # for i in range(H):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     # 入力の受け取り
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     Si=input()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     # Sへ追加
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     S.append(Si)
    
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Tの記録
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # T=[]
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # i~0~(H-1)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # for i in range(H):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     # 入力の受け取り
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     Ti=input()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     # Tへ追加
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     T.append(Ti)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Sの各列ごとの要素記録
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Sc=[]
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Tの各列ごとの要素記録
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Tc=[]

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # w=0~(W-1)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # for w in range(W):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     # w列の要素
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     Mozi=""
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     # h~0~(H-1)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     for h in range(H):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         # Moziへh行w列の文字を追加
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         Mozi+=S[h][w]
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     # 記録
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     Sc.append(Mozi)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # w=0~(W-1)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # for w in range(W):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     # w列の要素
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     Mozi=""
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     # h~0~(H-1)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     for h in range(H):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         # Moziへh行w列の文字を追加
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         Mozi+=T[h][w]
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     # 記録
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     Tc.append(Mozi)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 並び替え
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Sc.sort()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Tc.sort()

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # ScとTcが一致していれば
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # if Sc==Tc:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     # 「Yes」を出力
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     print("Yes")
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # そうでなければ
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # else:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     # 「No」を出力
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     print("No")

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # S = input()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # T = input()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # for i in range(len(S)):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     if S[i] != T[i]:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         print(i+1)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         exit()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # print(len(T))

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # from itertools import accumulate
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # import bisect
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # n,t = map(int, input().split())
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # A = [0] + list(map(int, input().split()))
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # A = list(accumulate(A))
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # t %= A[-1]
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # if t < A[-1]:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     print(bisect.bisect_left(A,t),t-A[bisect.bisect_left(A,t)-1])
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # else:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     print(bisect.bisect_left(A,t),t)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # N = int(input())
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # S = list(input())
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # judge = False
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # for i in range(N):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     if S[i] == '"':
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         if judge:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             judge = False
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         else:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             judge = True
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     if not judge and S[i] == ',':
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         S[i] = '.'
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # print(''.join(S))

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # S = input()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # cnt = 0
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # judge = False
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # for i in range(len(S)-1):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     if judge:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         judge = False
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         continue
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     if (S[i],S[i+1]) == ('0','0'):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         cnt += 1
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         judge = True
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # print(len(S)-cnt)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # S = input()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # begin = []
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # cnt = 1
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # done = set()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # for i,s in enumerate(S):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     if s == '(':
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         begin.append(i)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     elif s == ')':
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         for j in range(begin[-cnt],i):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             if S[j] != '(' and S[j] != ')' and S[j] in done:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #                 done.remove(S[j])
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         cnt += 1
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     else:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         if s in done:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             print("No")
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             exit()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         else:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             done.add(s)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # print("Yes")

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # from collections import Counter
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # n = int(input())
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # A = list(map(int, input().split()))
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # A = [a%200 for a in A] #200で割れている数という条件を利用していく
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # cnt = 0
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # A = Counter(A)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # for i in A.values():
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     if i > 2:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         cnt += (((i)*(i-1))//2) #３個以上一致の要素があるなら組み合わせをつかう
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     else:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         cnt += i-1 #それ以外なら単純に1をひく
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # print(cnt)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # S = input()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # fSlis = []
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # nSlis = []
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # fS = 0
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # aN = 0
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # nS = 0
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # for i,s in enumerate(S):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     if s == 'o':
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         fSlis.append(i+1)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         fS += 1
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     elif s == '?':
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         nSlis.append(i+1)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         nS += 1
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # print(fSlis, nSlis)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # print(fS,nS)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # def judge(tmp):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     for o in O:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         if o not in tmp:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             return False
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     for x in X:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         if x in tmp:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             return False
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     return True

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # S = input()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # O = []
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # X = []
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # for i, s in enumerate(S):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     if s == 'o':
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         O.append(str(i))
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     elif s == 'x':
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         X.append(str(i))
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # cnt = 0
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # for i in range(10000):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     tmp = str(i).zfill(4)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     if judge(tmp):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         cnt += 1
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # print(cnt)        

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # from collections import Counter
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # N = int(input())
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # A = list(map(int, input().split()))
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # B = list(map(int, input().split()))
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # C = list(map(int, input().split()))
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # A = Counter(A)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # C = Counter(C)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # cnt = 0
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # for i, b in enumerate(B):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     if b not in A:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         continue
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     if i+1 not in C:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         continue
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     cnt += A[b]*C[i+1]
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # print(cnt)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # from collections import defaultdict
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # N,k = map(int, input().split())
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # friends = defaultdict(int)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # cnt = k
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # for n in range(N):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     a,b = map(int, input().split())
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     friends[a] += b
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # for a,b in sorted(friends.items(), key=lambda x: x[0]):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     if cnt >= a:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         cnt += b
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     else:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         break
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # print(cnt)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # from collections import deque
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # N,M = map(int, input().split())
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # connected = [[] for _ in range(N+1)]
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # for i in range(M):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     a,b = map(int, input().split())
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     connected[a].append(b)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # ans = N
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # for i in range(1,N+1):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     q = deque()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     q.append(i)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     done = [False]*(N+1)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     done[i] = True
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     while len(q) > 0:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         now = q.popleft()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         for c in connected[now]:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             if done[c] == False:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #                 q.append(c)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #                 done[c] = True
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #                 ans += 1
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # print(ans)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # a,b,c = map(int, input().split())
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # if c % 2 == 0:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     if abs(a) > abs(b):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         print(">")
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     elif abs(a) < abs(b):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         print("<")
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     else:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         print("=")
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # else:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     if a > b:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         print(">")
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     elif a < b:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         print("<")
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     else:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         print("=")

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # from collections import Counter

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # n = int(input())
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # A = list(map(int, input().split()))
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # A = Counter(A)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # cnt = 0
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # ans = 0
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # for a in A.values():
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     cnt += a
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     ans += a*(n-cnt)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # print(ans)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # N = int(input())
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # combs = []
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # for i in range(N):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     t,l,r = map(int, input().split())
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     if t == 1:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         combs.append([l,r])
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     elif t == 2:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         combs.append([l,r-0.1])
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     elif t == 3:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         combs.append([l+0.1,r])
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     else:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         combs.append([l+0.1,r-0.1])
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # ans = 0
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # for i in range(N):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     for j in range(i+1,N):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         a,b = combs[i]
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         c,d = combs[j]
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         if a <= c and d <= b:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             ans += 1
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         elif c <= a and b <= d:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             ans += 1
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         elif c <= b and b<= d:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             ans += 1
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         elif a <= d and d <= b:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             ans += 1
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # print(ans)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # import bisect
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # n,k = map(int, input().split())
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # A = list(map(int, input().split()))
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # As = sorted(A)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # cnt = k//n
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # k -= cnt*n
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # for a in A:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     if (bisect.bisect_left(As,a)+1) <= k:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         print(cnt+1)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     else:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         print(cnt)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # n,k = map(int, input().split())
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # C = list(map(int, input().split()))
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # ans = 0
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # for i in range(n-k+1):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     tmp = len(set(C[i:i+k]))
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     ans = max(ans,tmp)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # print(ans)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # from collections import Counter
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # n,k = map(int, input().split())
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # clist = list(map(int, input().split()))
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # counter = Counter(clist[:k])
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # ans = len(counter)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # for i in range(k,n):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     left = clist[i-k]
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     right = clist[i]
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     counter[left] -= 1
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     counter[right] += 1
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     if counter[left] == 0:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         del counter[left]
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     ans = max(ans, len(counter))
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # print(ans)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # from collections import Counter
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # n,k = map(int, input().split())
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # C = list(map(int, input().split()))
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Cnt = Counter(C[:k])
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # ans = len(Cnt)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # for i in range(k,n):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     lef = C[i-k]
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     rig = C[i]
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     Cnt[lef] -= 1
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     Cnt[rig] += 1
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     if Cnt[lef] == 0:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         del Cnt[lef]
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     ans = max(ans,len(Cnt))
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # print(ans)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # MOD = 10 ** 9 + 7


# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # def main():
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     from collections import Counter

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     S = input()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     T = '*chokudai'  # 0文字目は英小文字でない適当な記号にします
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     dp = Counter()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     dp['*'] = 1
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     for char in S:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         if char in T:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             char_prev = T[T.index(char) - 1]  # charの前の文字、iの前はa、cの前は*
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             dp[char] += dp[char_prev]
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             dp[char] %= MOD
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             print(char,char_prev)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             print(dp)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     print(dp['i'])


# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # if __name__ == '__main__':
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     main()

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # MOD = 10**9+7
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # from collections import Counter
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # S = input()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Ans = "!chokudai"
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Cnts = Counter()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Cnts['!'] = 1
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # for s in S:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     if s in Ans:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         sP = Ans[Ans.index(s)-1]
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         Cnts[s] += Cnts[sP]
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         Cnts[s] %= MOD
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # print(Cnts["i"])

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # import bisect
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # INF = 1<<60
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # N,M = map(int, input().split())
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # A = sorted(list(map(int, input().split())))
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # B = sorted(list(map(int, input().split())))
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # ans = INF
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # for a in A:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     tmp = bisect.bisect_right(B,a)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     if tmp == len(B):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         ans = min(ans,abs(a-B[tmp-1]))
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     elif tmp == 0:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         ans = min(ans,abs(a-B[tmp]))
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     else:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         ans = min(ans,min(abs(a-B[tmp]),abs(a-B[tmp-1])))
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # print(ans)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # H,W,N = map(int, input().split())
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # nums = []
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # rows = []
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # cols = []
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # for i in range(N):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     a,b = (map(int, input().split()))
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     rows.append(a)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     cols.append(b)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     nums.append([a,b])
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # rows.sort()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # cols.sort()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # for a,b in nums:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     print((rows.index(a))+1,(cols.index(b))+1)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # H,W,N = map(int, input().split())
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # X = []
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Y = []
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # for i in range(N):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     x,y = map(int, input().split())
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     X.append(x)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     Y.append(y)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # sortedX = sorted(set(X))
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # sortedY = sorted(set(Y))
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # ansX = {sortedX[i]: i+1 for i in range(len(sortedX))}
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # ansY = {sortedY[i]: i+1 for i in range(len(sortedY))}
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # for x,y in zip(X,Y):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     print(ansX[x], ansY[y])

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # INF = 1<<60
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # N = int(input())
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # S = list(map(int, input().split()))
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # T = list(map(int, input().split()))
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # dp = [INF]*N
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # dp[0] = T[0]
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # for i in range(1,N):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     dp[i] = min(dp[i-1]+S[i-1],T[i])
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # for i in range(N):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     dp[i] = min(dp[i-1]+S[i-1],T[i])
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # for d in dp:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     print(d)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # from itertools import permutations
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # S,K = input().split()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # S = list(S)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # K = int(K)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # arr = sorted(set(list(permutations(S,len(S)))))
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # print(arr)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # print(''.join(list(arr[K-1])))

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # import math
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # N = int(input())
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # cN = N
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # ans = 'AA'
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # num = 2
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # if N == 1:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     print('A')
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     exit()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # elif N == 2:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     print(ans)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     exit()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # if N % 2 == 1:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     tmp = int(math.sqrt(N))
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     ans+= 'B'*(tmp-1)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     N -= 2**tmp
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     ans += 'A'*N
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     print(ans)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # else:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     cnt = 0
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     while N % 2 == 0:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         N /= 2
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         cnt += 1
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     N = int(N)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     if 2**cnt == cN:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         ans += 'B'*(cnt-1)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         print(ans)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         exit()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     tmp = int(math.sqrt(N))
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     ans+= 'B'*(tmp-1)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     N -= 2**tmp
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     ans += 'A'*N
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     ans += 'B'*cnt
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     print(ans)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # X = input()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # N = int(input())
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # normal = 'abcdefghijklmnopqrstuvwxyz'
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # lis = list(input() for _ in range(N))
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # ans = [[] for _ in range(26)]
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # for l in lis:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     ans[X.index(l[0])].append(l)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # for A in ans:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     if len(A) > 1:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         tmp = []

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # X = input()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # D = dict()

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # for i in range(26):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     nxt = chr(i + ord('a'))
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     D[X[i]] = nxt
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # n = int(input())
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # ans = []
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # for i in range(n):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     S = input()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     T = ""
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     for s in S:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         T += D[s]
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     ans.append((T,S))
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # ans.sort()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # for i in range(n):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     print(ans[i][1])

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # X = input()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # D = dict()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # for i in range(26):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     tmp = chr(i+ord('a'))
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     D[X[i]] = tmp
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # N = int(input())
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # ans = []
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # for i in range(N):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     S = input()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     tmp = ""
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     for s in S:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         tmp += D[s]
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     ans.append((tmp,S))
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # ans.sort()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # for i in range(N):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     print(ans[i][1])

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # from itertools import product
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # N = list(input())
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # ans = 0
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # for i in range(len(N)-1):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     bef = sorted(N[:i+1],reverse=True)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     aft = sorted(N[i+1:],reverse=True)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     ans = max(ans, int(''.join(bef))*int(''.join(aft)))
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # print(ans)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # from itertools import product

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # N = input()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # ans = 0
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # def calc(pro):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     bef = ""
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     aft = ""
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     for i in range(len(N)):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         if pro[i]:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             aft += N[i]
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         else:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             bef += N[i]
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     if aft == "" or bef == "":
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         return 0
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     else:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         return int(''.join(sorted(bef, reverse=True))) * int(''.join(sorted(aft, reverse=True)))
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # for pro in product((0,1),repeat=len(N)):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     tmp = calc(pro)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     ans = max(ans,tmp)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # print(ans)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # N,M = map(int, input().split())
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # hands = [list(input()) for _ in range(2*N)]
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # for i in range(M):

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # N, M = map(int, input().split())
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # hands = []
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # for _ in range(2 * N):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     s = input()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     hands.append(s)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # rank = [[0, i] for i in range(2 * N)]

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # D[h1][h2]: じゃんけんでh1, h2を出して、h1が勝つなら1, h2が勝つなら2
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # D = {"G": {"C": 1, "P": 2},
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     "C": {"P": 1, "G": 2},
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     "P": {"G": 1, "C": 2}}

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # for j in range(M):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     for i in range(N):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         p1 = rank[2 * i][1]  # 2*i位の選手番号
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         p2 = rank[2 * i + 1][1] # 2*i+1位の選手番号
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         h1 = hands[p1][j]  # p1がjラウンド目に出す手
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         h2 = hands[p2][j]  # p2がjラウンド目に出す手
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         if h1 == h2:  # あいこです
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             continue
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         else:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             winner = D[h1][h2]
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             if winner == 1:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #                 rank[2 * i][0] -= 1  # ここで勝ったほうの勝利カウントを-1すると、ソートが楽です
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             else:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #                 rank[2 * i + 1][0] -= 1
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     rank.sort()  # 勝利カウントが小さい順（＝勝利数が多い順）に並び替える、同じなら選手番号が小さい順が上
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     print(rank)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # for i in range(2 * N):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     print(rank[i][1] + 1)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # N,M = map(int, input().split())
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # hands = [input() for _ in range(2*N)]
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # rank = [[0,i] for i in range(2*N)]
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # power = {'G':{'C':1,'P':2},
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             'C':{'P':1,'G':2},
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             'P':{'G':1,'C':2}}
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # for i in range(M):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     for j in range(N):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         p1 = rank[j*2][1]
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         p2 = rank[j*2+1][1]
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         h1 = hands[p1][i]
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         h2 = hands[p2][i]
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         if h1 == h2:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             continue
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         else:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             winner = power[h1][h2]
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             if winner == 1:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #                 rank[j*2][0] -= 1
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             else:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #                 rank[j*2+1][0] -= 1
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     rank.sort()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # for i in range(2*N):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     print(rank[i][1]+1)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # from itertools import accumulate

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # N = int(input())
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # sts = []
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # qs = []
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # dt = []
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # for i in range(N):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     a,b = map(int, input().split())
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     sts.append(a)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     qs.append(b)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     dt.append(a/b)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Adt = list(accumulate(dt))
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # print(dt,Adt,Adt[-1]/2)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # def main():
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     N = int(input())
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     L = []
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     sec = 0
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     for _ in range(N):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         a, b = map(int, input().split())
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         L.append((a, b))
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         sec += a / b  #この導火線全体が燃えるのに、a / b 秒かかります
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     rem = sec / 2
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     ans = 0

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     for a, b in L:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         if rem >= a / b:  # この導火線全体が燃えるかどうか
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             ans += a  # a cm進みます
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             rem -= a / b  # a / b 秒経過しました
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         else:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             ans += rem * b  # 1秒あたりb cm 進むので、rem * b cm 燃えたところで 全体で S / 2 秒経過します
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             break
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         print(rem,ans)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     print(ans)


# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # if __name__ == '__main__':
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     main()

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # N = int(input())
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Sts = []
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # sec = 0
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # for i in range(N):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     a,b = map(int,input().split())
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     Sts.append((a,b))
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     sec += a/b
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # rem = sec/2
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # ans = 0
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # for a,b in Sts:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     if a/b <= rem:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         ans += a
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         rem -= a/b
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     else:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         ans += rem*b
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         break
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # print(ans)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # N = int(input())
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # points = []
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # for i in range(N):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     x,y = map(int,input().split())
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     points.append((x,y))
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # ans = 0
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # print(points)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # for i in range(N):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     for j in range(i+1,N):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         for k in range(j+1,N):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             ixjx = abs(points[i][0]-points[j][0])
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             iyjy = abs(points[i][1]-points[j][1])
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             ixkx = abs(points[i][0]-points[k][0])
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             iyky = abs(points[i][1]-points[k][1])
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             jxkx = abs(points[j][0]-points[k][0])
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             jyky = abs(points[j][1]-points[k][1])
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             if ixjx == ixkx == jxkx == 0:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #                 continue
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             elif ixjx == ixkx == 0:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #                 continue
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             elif ixjx == jxkx == 0:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #                 continue
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             elif ixkx == jxkx == 0:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #                 continue
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             elif ixjx == 0:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #                 if (iyky//ixkx) == (jyky//jxkx):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #                     continue
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             elif ixkx == 0:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #                 if (iyjy//ixjx) == (jyky//jxkx):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #                     continue
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             elif jxkx == 0:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #                 if (iyjy//ixjx) == (iyky//ixkx):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #                     continue
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             elif (iyky//ixkx) == (jyky//jxkx) == (iyjy//ixjx):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #                 continue
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             else:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #                 ans += 1
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # print(ans)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # N,M = map(int, input().split())
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # grids = []
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # for i in range(N):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     B = tuple(map(int, input().split()))
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     grids.append(B)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # for i in range(M):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     if grids[0][i] % 7 ==0 and i != M-1:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         print("No")
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         exit
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # prevM = grids[0][0]-1
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # for i in range(M):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     prev = grids[0][i]
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     if prev - prevM != 1:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         print("No")
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         exit()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     prevM = prev
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     for j in range(1,N):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         if grids[j][i] - prev != 7:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             print("No")
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             exit()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         prev = grids[j][i]
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # print("Yes")

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # from collections import deque
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # N = int(input())
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # T = []
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # K = []
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # A = []
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # for _ in range(N):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     t,k,*a = list(map(int, input().split()))
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     T.append(t)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     K.append(k)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     A.append(a)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # q = deque()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # ans = T[-1]
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # done = [False]*N
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # for a in A[-1]:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     q.append(a)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # while q:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     need = q.popleft()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     if done[need-1] == False:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         done[need-1] = True
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         ans += T[need-1]
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         for a in A[need-1]:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             q.append(a)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # print(ans)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # import bisect
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # N,Q = map(int,input().split())
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # A = sorted(list(map(int, input().split())))
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # for i in range(Q):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     x = int(input())
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     print(N-bisect.bisect_left(A,x))

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # from itertools import permutations


# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # def judge():
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     def is_same_shape(P):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         for i in range(N):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             for j in range(N):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #                 if AB[P[i]][P[j]] != CD[i][j]: return False
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         return True

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     N, M = map(int, input().split())
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     AB = [[False] * N for _ in range(N)]
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     CD = [[False] * N for _ in range(N)]

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     for _ in range(M):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         a, b = map(int, input().split())
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         a, b = a - 1, b - 1
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         AB[a][b] = True
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         AB[b][a] = True

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     for _ in range(M):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         c, d = map(int, input().split())
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         c, d = c - 1, d - 1
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         CD[c][d] = True
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         CD[d][c] = True
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     print(AB,CD)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     for perm in permutations(range(N)):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         print(perm)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         if is_same_shape(perm):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             return True
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     return False


# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # print("Yes" if judge() else "No")

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # N,X = map(int, input().split())
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # ans = 0
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # nums = []
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # for i in range(N):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     l,*A = list(map(int, input().split()))
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     tmp = []
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     if i == 0:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         nums.append(A)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     else:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         for x in nums[i-1]:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             for a in A:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #                 tmp.append(x*a)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         nums.append(tmp)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # print(nums[-1].count(X))

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # s = input()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # la = len(s) - len(s.lstrip('a'))
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # ra = len(s) - len(s.rstrip('a'))
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # if la > ra:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     print("No")
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     exit()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # else:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     s = "a"*(ra-la)+s
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     if s == s[::-1]:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         print("Yes")
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     else:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         print("No")

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # MOD = 998244353
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # N = int(input())
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # leng = ("1"+"0"*(len(N)-1))
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # lengs = ("1"+"0"*(len(N)-2))
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # ans = sum(list(i for i in range(1,int(leng)-int(lengs)+1)))
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # tmp = 0
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # print(ans)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # ans += sum(list(i for i in range(1,int(N)-(int(leng)-2))))
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # print(ans)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # L = len(str(N))
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # ans = 0
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # for i in range(1,L+1):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     tmp = min(N,10**i-1) - (10**(i-1)-1)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     ans += ((tmp*(tmp+1))//2)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     ans %= MOD
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # print(ans)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # N,X = map(int, input().split())
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # dp = [[False]*(X+1) for _ in range(N)]
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # a,b = map(int, input().split())
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # if a < X+1:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     dp[0][a] = True
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # if b < X+1:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     dp[0][b] = True
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # for i in range(1,N):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     a,b = map(int, input().split())
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     for j in range(X+1):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         if dp[i-1][j]:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             if j+a < X+1:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #                 dp[i][j+a] = True
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             if j+b < X+1:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #                 dp[i][j+b] = True
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # if dp[-1][-1]:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     print("Yes")
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # else:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     print("No")

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # def check(i,j,y,x):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     cnt = 0
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     for _ in range(6):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         if not (0<=i<N and 0<=j<N):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             return False
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         cnt += S[i][j]
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         i += y
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         j += x
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     return cnt >= 4

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # N = int(input())
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # S = [[1 if c == "#" else 0 for c in input()] for _ in range(N)]
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # moves = [(1,0),(0,1),(1,-1),(1,1)]
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # for i in range(N):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     for j in range(N):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         for y,x in moves:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             if check(i,j,y,x):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #                 print("Yes")
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #                 exit()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # print("No")

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # MOD = 998244353
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # N = int(input())
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # dp = [[0]*(11) for i in range(N+1)]
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # for i in range(1,10):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     dp[1][i] = 1
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # for i in range(1,N):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     for j in range(1,10):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         dp[i+1][j] = (dp[i][j-1]+dp[i][j]+dp[i][j+1])%MOD
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # print(sum(dp[N])%MOD)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # N = int(input())
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # X = []
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Y = []
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # for i in range(N):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     x,y = map(int, input().split())
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     X.append(x)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     Y.append(y)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # D = input()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Rmins = {}
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Lmaxs = {}
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # for i,d in enumerate(D):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     if d == 'R':
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         if Y[i] in Rmins:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             Rmins[Y[i]] = min(Rmins[Y[i]],X[i])
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         else:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             Rmins[Y[i]] = X[i]
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     else:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         if Y[i] in Lmaxs:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             Lmaxs[Y[i]] = max(Lmaxs[Y[i]],X[i])
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         else:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             Lmaxs[Y[i]] = X[i]
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # for key, value in Rmins.items():
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     if key in Lmaxs:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         if value <= Lmaxs[key]:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             print("Yes")
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             exit()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # print("No")

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # N,K = map(int, input().split())
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # A = list(map(int, input().split()))
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # B = list(map(int, input().split()))
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # a_ok = True
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # b_ok = True
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # for i in range(N-1):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     aB,aN = A[i],A[i+1]
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     bB,bN = B[i],B[i+1]
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     an_ok,bn_ok = False, False

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # N,K,X = map(int, input().split())
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # A = list(map(int, input().split()))
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # ans = sum(A)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # ables = 0
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # lefts = []
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # for a in A:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     ables += (a//X)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     lefts.append(a%X)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # lefts.sort(reverse=True)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # ans -= X * min(ables,K)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # K -= min(ables,K)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # ans -= sum(lefts[:K])
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # print(ans)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # MOD = 998244353
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # N,M,K = map(int, input().split())
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # dp = [[0]*(K+1) for _ in range(N+1)]
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # dp[0][0] = 1
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # for i in range(N):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     for j in range(K):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         for k in range(1,M+1):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             if j+k > K:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #                 break
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             dp[i+1][j+k] += dp[i][j]
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             dp[i+1][j+k] %= MOD
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # print(sum(dp[-1])%MOD)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # from itertools import product
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # from collections import Counter

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # def judge(pro):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     St = ""
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     for i in range(N):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         if pro[i]:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             St += S[i]
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     Cnt = Counter(St)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     return list(Cnt.values()).count(K)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # N,K = map(int, input().split())
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # S = []
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # for i in range(N):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     s = input()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     S.append(s)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # ans = 0
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # for pro in product((0,1), repeat=N):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     ans = max(ans, judge(pro))
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # print(ans)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # from collections import deque

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # N,Q = map(int, input().split())
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # A = list(range(N+1))
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # idx = list(range(N+1))
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # for i in range(Q):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     x = int(input())
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     fi = idx[x]
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     si = fi+1 if fi != N else fi-1
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     y = A[si]
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     A[fi],A[si] = A[si],A[fi]
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     idx[x] = si
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     idx[y] = fi
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # print(*A[1:])

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # N = int(input())
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # done = set()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # ori = {}
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # T = 0
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # for i in range(N):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     s,t = input().split()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     t = int(t)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     if s not in done:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         done.add(s)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         if not t in ori:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             ori[t] = i
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # print(sorted(ori.items(), reverse=True)[0][1]+1)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # from collections import Counter
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # INF = 1<<60
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # N = int(input())
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # nums = [[] for _ in range(10)]
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # for i in range(N):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     S = input()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     for i,s in enumerate(S):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         nums[int(s)].append(i)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # ans = INF
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # for num in nums:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     Cnt = Counter(num)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     tmp = 0
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     # print(Cnt)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     for key,val in Cnt.items():
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         tmp = max(tmp,key+(val-1)*10)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     ans = min(ans,tmp)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     # print(tmp)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # print(ans)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # from collections import defaultdict
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Q = int(input())
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # nums = defaultdict(int)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # for i in range(Q):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     que = list(map(int, input().split()))
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     if que[0] == 1:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         nums[que[1]] += 1
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     elif que[0] == 2:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         nums[que[1]] -= min(que[2],nums[que[1]])
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         if nums[que[1]] == 0:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             nums.pop(que[1])
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     else:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         print((max(nums)-min(nums)))

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # from collections import Counter
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # N,K = map(int,input().split())
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # A = list(map(int, input().split()))
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # ans = sorted(A)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Acnt = Counter(A)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # print(Acnt)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # if A == ans:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     print("Yes")
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     exit()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # done = [False]*N
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # for i,a in enumerate(A):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     if i % 

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # def judge():
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     N, K = map(int, input().split())
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     A = list(map(int, input().split()))
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     B = [[] for _ in range(K)]  # i を Kで割った余りごとに管理
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     for i, x in enumerate(A):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         B[i % K].append(x)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     print(B)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     for i in range(K):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         B[i].sort()  # ソートする
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     print(B)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     SA = [0] * N
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     for i in range(N):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         SA[i] = B[i % K][i // K]
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     return SA == sorted(A)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # print("Yes" if judge() else "No")

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # N,K = map(int,input().split())
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # A = list(map(int, input().split()))
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # B = [[] for _ in range(K)]
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # for i,a in enumerate(A):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     B[i%K].append(a)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # for i in range(K):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     B[i].sort()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # ans = [0]*N
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # for i in range(N):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     ans[i] = B[i%K][i//K]
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # if ans == sorted(A):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     print("Yes")
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # else:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     print("No")

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # import bisect

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # X,A,D,N = map(int, input().split())
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # gN = [i for i in range(A,D*N,N)]
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # print(gN)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # h1,h2,h3,w1,w2,w3 = map(int, input().split())
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # ans = 0
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # for i in range(1,h1-1):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     for j in range(1,h2-1):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         for k in range(1,h1-1):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             for l in range(1,h2-1):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #                 h1w3 = h1-i-k
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #                 if h1w3 < 1:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #                     continue
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #                 h2w3 = h2-j-l
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #                 if h2w3 < 1:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #                     continue
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #                 h3w1 = w1-i-j
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #                 if h3w1 < 1:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #                     continue
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #                 h3w2 = w2-k-l
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #                 if h3w2 < 1:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #                     continue
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #                 h3w3 = w3-h1w3-h2w3
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #                 if h3w3 == (h3-h3w1-h3w2) and h3w3 > 0:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #                     ans += 1
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # print(ans)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # import bisect

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # N = int(input())
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # S = input()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # W = list(map(int, input().split()))
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Ch = []
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Ad = []
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # for i,s in enumerate(S):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     if S[i] == '1':
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         Ad.append(W[i])
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     else:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         Ch.append(W[i])
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Ch.sort()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Ad.sort()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # if len(Ch)==0 or len(Ad)==0:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     print(N)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     exit()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # print(Ch,Ad)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # idx = bisect.bisect_left(Ad,Ch[-1]+1)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # idx2 = bisect.bisect_left(Ch,Ad[0]-1)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # print(max((len(Ch)+len(Ad)-idx),len(Ad)+idx2))

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # N = int(input())
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # S = input()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # W = list(map(int,input().split()))
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # L = []
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # for w, s in zip(W,S):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #   L.append([w,int(s)])
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # L.sort()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # fx = S.count("1")
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # fx_max = fx
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # adult,child = 0,0
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # for i in range(1,len(L)):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #   if L[i][0] == L[i-1][0]:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     if L[i-1][1] == 1:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #       adult += 1
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     else:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #       child += 1
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #   else:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     if L[i-1][1] == 1:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #       fx += (child - adult - 1)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     else:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #       fx += (child - adult + 1)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     adult,child = 0,0
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     if fx > fx_max:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #       fx_max = fx
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # print(max(fx_max,S.count("0")))

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # N,Q = map(int, input().split())
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # S = input()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # move = 0
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # for i in range(Q):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     t,x = map(int,input().split())
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     if t == 1:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         move += x
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         move %= N
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     else:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         print(S[x-move-1])

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # S = input()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # T = input()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # ch = 0
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # if S[:2] != T[:2]:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     print("No")
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     exit()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # for i in range(2,len(S)):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     if S[i-ch] != T[i]:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         print(i-ch,i)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         if S[i-1-ch] != S[i-2-ch]:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             print("No")
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             exit()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         if S[i-1-ch] != T[i]:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             print("No")
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             exit()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         ch+=1
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # print(ch)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # print("Yes")

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # def sorting(arr):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     tmp = []
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     for a in arr:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         if len(tmp) == 0:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             tmp.append([a])
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         else:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             if tmp[-1][0] == a:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #                 tmp[-1].append(a)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             else:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #                 tmp.append([a])
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     return tmp

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # S = input()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # T = input()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # sInfo = sorting(S)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # tInfo = sorting(T)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # print(sInfo,tInfo)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # if len(sInfo) != len(tInfo):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     print("No")
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     exit()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # else:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     for s,t in zip(sInfo,tInfo):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         if s[0] != t[0]:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             print("No")
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             exit()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         elif len(s) > len(t):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             print("No")
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             exit()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         elif len(s) < len(t) and len(s) == 1:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             print("No")
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             exit()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # print("Yes")

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # def sorting(arr):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     tmp = []
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     for a in arr:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         if not tmp:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             tmp.append([a])
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         else:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             if tmp[-1][0] == a:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #                 tmp[-1].append(a)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             else:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #                 tmp.append([a])
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     return tmp

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # S = input()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # T = input()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # sS = sorting(S)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # sT = sorting(T)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # if len(sS) != len(sT):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     print("No")
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     exit()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # for s,t in zip(sS,sT):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     if s[0] != t[0]:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         print("No")
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         exit()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     elif len(s) > len(t):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         print("No")
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         exit()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     elif len(s) < len(t) and len(s) == 1:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         print("No")
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         exit()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # print("Yes")

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # N,X,Y = map(int, input().split())
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # redJ = [0]*N
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # blueJ = [0]*N
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # redJ[0] += 1
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # for i in range(N-1):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     redJ[i+1] += redJ[i]
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     blueJ[i] += redJ[i]*X
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     redJ[i+1] += blueJ[i]
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     blueJ[i+1] += blueJ[i]*Y
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # print(blueJ[-1])

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # N = int(input())
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # A = list(map(int, input().split()))
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # ans = 0
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # for i in range(N):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     print(A[i],A[A[i]-1])
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     if min(A[i],A[A[i]-1]) == i+1:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         ans += 1
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # print(ans)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # from itertools import permutations

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # N,M = map(int, input().split())
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # lis = [i for i in range(1,M+1)]
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # for i in permutations(lis,N):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     if sorted(i) == list(i):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         print(*list(i))

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # H,W = map(int,input().split())
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # A = [list(map(int,input().split())) for _ in range(H)]
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # H2,W2 = map(int,input().split())
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # B = [list(map(int,input().split())) for _ in range(H2)]
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # for b_line in B:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     for a_line in A:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         check = True
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         for b in b_line:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             if not check:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #                 break
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             if b not in a_line:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #                 check = False
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         if check:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             break
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     if not check:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         print("No")
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         exit()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Bver = [[] for _ in range(W2)]
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # for i in range(W2):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     for j in range(H2):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         Bver[i].append(B[j][i])
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Aver = [[] for _ in range(W)]
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # for i in range(W):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     for j in range(H):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         Aver[i].append(A[j][i])
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # for b_line in Bver:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     for a_line in Aver:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         check = True
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         for b in b_line:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             if not check:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #                 break
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             if b not in a_line:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #                 check = False
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         if check:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             break
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     if not check:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         print("No")
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         exit()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # print("Yes")

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # H,W = map(int, input().split())
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # fields = [list(input()) for _ in range(H)]
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # done = [[False]*W for _ in range(H)]
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # x,y = 0,0
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # while True:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     if done[y][x]:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         print(-1)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         exit()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     done[y][x] = True
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     if fields[y][x] == 'U':
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         if y == 0:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             print(y+1,x+1)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             exit()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         else:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             y -= 1
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     elif fields[y][x] == 'D':
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         if y == H-1:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             print(y+1,x+1)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             exit()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         else:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             y += 1
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     elif fields[y][x] == 'L':
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         if x == 0:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             print(y+1,x+1)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             exit()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         else:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             x -= 1
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     elif fields[y][x] == 'R':
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         if x == W-1:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             print(y+1,x+1)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             exit()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         else:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             x += 1

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # from itertools import permutations
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # points = [list(map(int, input().split())) for _ in range(4)]
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # lis = [0,1,2,3]
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # for i in permutations(lis):

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # X = []
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Y = []
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # for _ in range(4):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     x, y = map(int, input().split())
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     X.append(x)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     Y.append(y)


# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # def f0(x, y):  # 1 本目の対角線 (方程式の右辺が 0 になるようにした場合の左辺)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     return (X[2] - X[0]) * (y - Y[0]) - (Y[2] - Y[0]) * (x - X[0])a


# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # def f1(x, y):  # 2 本目の対角線 (方程式の右辺が 0 になるようにした場合の左辺)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     return (X[3] - X[1]) * (y - Y[1]) - (Y[3] - Y[1]) * (x - X[1])


# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # def sgn(x):  # x の符号が正なら 1、負なら -1、0 なら 0 を返す
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     if x == 0:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         return 0
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     return x // abs(x)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # print(f0(X[1], Y[1]),f0(X[3], Y[3]),f1(X[0], Y[0]),f1(X[2], Y[2]))
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # if sgn(f0(X[1], Y[1])) != sgn(f0(X[3], Y[3])) and sgn(f1(X[0], Y[0])) != sgn(f1(X[2], Y[2])):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     print("Yes")
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # else:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     print("No")

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # N,M = map(int, input().split())
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # A = list(map(int, input().split()))
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # ans = 0
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # for i in range(M):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     ans += (A[i]*(i+1))
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # bef = sum(A[0:M])
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # befT = ans
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # for i in range(M,N):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     tmp = befT-bef+(A[i]*M)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     ans = max(ans, tmp)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     bef += (A[i]-A[i-M])
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     befT = tmp
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # print(ans)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # N=int(input())
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # P=list(map(int,input().split()))
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # idx=[0]*N
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # for i in range(N):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     idx[P[i]]=i
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # dist=[0]*N
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # for i in range(N):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     dist[i]=(i-idx[i])%N
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # count=[0]*N
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # for i in range(N):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     count[dist[i]]+=1
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # ans=0
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # for i in range(N):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     ans=max(ans,count[i]+count[(i+1)%N]+count[(i+2)%N])
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # print(ans)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 入力の受け取り
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # N=int(input())

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Nを2進数へ変換
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Nbit=bin(N)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 「0b」を消す
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Nbit=Nbit[2:]
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 反転
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Nbit=Nbit[::-1]

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # xへ空の文字列を入れておく
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # x=[""]
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # print(Nbit)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # i=0~(Nbitの長さ-1)まで
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # for i in range(len(Nbit)):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     # 新しいxのリスト
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     Newx=[]

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     # Nの右からi桁目が「0」ならば
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     if Nbit[i]=="0":
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         # xの要素を順にaへ格納して処理
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         for a in x:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             # 先頭に「0」をつける
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             Newx.append("0"+a)
    
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     # Nの右からi桁目が「1」ならば
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     else:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         # xの要素を順にaへ格納して処理
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         for a in x:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             # 先頭に「0」をつける
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             Newx.append("0"+a)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             # 先頭に「1」をつける
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             Newx.append("1"+a)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     # xを更新
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     x=Newx
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     print(x,Newx,i)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 小さい順に並び替え
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # x.sort()

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # xの要素を順にansへ格納して処理
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # for ans in x:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     # ansを10進数へ変換
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     print(int(ans,2))

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # N = int(input())
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # secN = format(N,'b')[::-1]
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Ans = [""]
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # for i in range(len(secN)):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     tmp = []
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     if secN[i] == "0":
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         for a in Ans:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             tmp.append("0"+a)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     else:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         for a in Ans:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             tmp.append("0"+a)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             tmp.append("1"+a)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     Ans = tmp
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Ans.sort()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # for a in Ans:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     print(int(a,2))

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # from collections import deque
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # N,X,Y = map(int, input().split())
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # connected = [[] for _ in range(N)]
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # for i in range(N-1):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     u,v = map(int, input().split())
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     connected[u-1].append(v-1)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     connected[v-1].append(u-1)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # done = [False]*N
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # q = deque()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # q.append(X-1)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # while q:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     node = q.popleft()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     if done[node] == False:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         done[node] = True
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         for data in connected[node]:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             if data+1 == Y:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #                 print(node+1)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #                 print(data+1)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #                 exit()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             q.append(data)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         print(node+1)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # N,X,Y=map(int,input().split())
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # connect=[[] for i in range(N+1)]
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # for i in range(N-1):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     U,V=map(int,input().split())
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     connect[U].append(V)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     connect[V].append(U)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Dist=[-1]*(N+1)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Dist[X]=0
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # from collections import deque
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # que=deque()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # que.append(X)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # while 0<len(que):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     Now=que.popleft()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     for to in connect[Now]:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         if Dist[to]==-1:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             Dist[to]=Dist[Now]+1
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             que.append(to)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # print(Dist)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # ans=deque()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Count=Dist[Y]
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Now=Y
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # while 0<Count:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     ans.appendleft(Now)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     for to in connect[Now]:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         if Dist[to]==Count-1:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             Count-=1
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             Now=to
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # ans.appendleft(X)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # print(*ans)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # N,X,Y = map(int, input().split())
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # connected = [[] for _ in range(N+1)]
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # for i in range(N-1):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     U,V = map(int, input().split())
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     connected[U].append(V)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     connected[V].append(U)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # dist = [-1]*(N+1)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # dist[X] = 0
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # from collections import deque
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # q = deque()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # q.append(X)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # while 0 < len(q):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     now = q.popleft()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     for to in connected[now]:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         if dist[to] == -1:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             dist[to] = dist[now]+1
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             q.append(to)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # ans = deque()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Cnt = dist[Y]
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # now = Y
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # while 0<Cnt:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     ans.appendleft(now)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     for to in connected[now]:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         if dist[to] == Cnt-1:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             Cnt -= 1
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             now = to
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # ans.appendleft(X)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # print(*ans)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # N = int(input())
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # A = list(map(int, input().split()))
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # left = 0
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Cnt = [0]*(N+1)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # own = []
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # done = [False]*(N+1)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # done[0] = True
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # for i in range(N):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     if A[i] <= N and Cnt[A[i]] == 0:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         Cnt[A[i]] = 1
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         own.append(A[i])
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         done[A[i]] = True
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     else:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         left += 1
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # own.sort()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # now = 1
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # sell = len(own)-1
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # while now <= N:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     if done[now] == False:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         if 2 <= left:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             left -= 2
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             done[now] = True
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             now += 1
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         else:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             if 0 <= sell and now < own[sell]:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #                 left += 1
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #                 done[own[sell]] = False
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #                 sell -= 1
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             else:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #                 break
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     else:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         now += 1
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # ans = 0
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # while ans <= N and done[ans] == True:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     ans += 1
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # print(ans)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 入力の受け取り
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # N=int(input())
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # a=list(map(int,input().split()))

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 売る漫画の数
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # amari=0

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 各巻の冊数確認
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # count=[0]*(N+1)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 持っている漫画()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # comics=[]

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 持っている漫画
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # read=[False]*(N+1)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 0巻を持っている漫画とする
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # read[0]=True

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # (1)売る漫画と残す漫画を分ける(売る漫画の冊数を記録する)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # (2)持っている漫画のリストを用意する
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # i=0~(N-1)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # for i in range(N):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     # 巻数がN以下 かつ a[i]の持っている冊数が0
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     if a[i]<=N and count[a[i]]==0:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         # 1冊持っていると記録
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         count[a[i]]=1
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         # comicsに記録
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         comics.append(a[i])
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         # a[i]は持っている漫画と記録
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         read[a[i]]=True
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     # そうでない場合
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     else:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         # 売る漫画にカウント
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         amari+=1

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 持っている漫画をソート
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # comics.sort()

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 読もうとしている漫画
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # i=1
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 売ろうとしている漫画
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # k=len(comics)-1

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # i≤Nの間
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # while i<=N:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     # i巻を持っていなければ
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     if read[i]==False:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         # 売る漫画が2冊以上あれば
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         if 2<=amari:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             # 2冊売る
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             amari-=2
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             # i巻を買う
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             read[i]=True
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             # 次の巻へ
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             i+=1
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         # そうでなければ
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         else:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             # 0≤k かつ 読もうとしている巻<売ろうとしている巻 ならば
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             if 0<=k and i<comics[k]:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #                 # 売る
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #                 amari+=1
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #                 # 持っている漫画から外す
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #                 read[comics[k]]=False
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #                 # kをマイナス1
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #                 k-=1
            
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             # そうでなければ
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             else:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #                 # 終了
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #                 break
    
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     # そうでなければ
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     else:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         # 次の巻へ
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         i+=1

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 初期値
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # i=0
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 持っている巻の最大を探す
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # i≤N かつ i巻を持っている
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # while i<=N and read[i]==True:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     # 次のiへ
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     i+=1

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # (i-1)巻まで持っている
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # print(i-1)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # import bisect
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # N = int(input())
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # A = list(map(int, input().split()))
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Asort = sorted(list(set(A)))
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # ans = [0]*(N)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # for a in A:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     ans[len(Asort) - bisect.bisect_right(Asort, a)] += 1
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # for a in ans:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     print(a)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # N = int(input())
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # A = list(map(int, input().split()))
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # nums = [0]*(2*N+2)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # for i in range(1,N+1):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     nums[i*2] = nums[A[i-1]]+1
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     nums[i*2+1] = nums[A[i-1]]+1
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # nums = nums[1:]
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # for n in nums:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     print(n)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # S = []
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # for i in range(9):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     s = list(input())
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     S.append(s)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # cnt = 0
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # for ay in range(9):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     for ax in range(9):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         for by in range(ay,9):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             for bx in range(ax+1,9):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #                 if S[ay][ax] == "#" and S[by][bx] == "#":
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #                     cy = by+(bx-ax)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #                     cx = bx-(by-ay)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #                     dy = cy-(bx-cx)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #                     dx = cx-(cy-by)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #                     if 0<=cy<=8 and 0<=cx<=8 and 0<=dy<=8 and 0<=dx<=8:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #                         if S[cy][cx] == "#" and S[dy][dx] == "#":
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #                             cnt += 1
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # print(cnt)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # N = int(input())
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # A = list(map(int, input().split()))
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # for i in range(N-2,-1,-1):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     if A[i] > A[i+1]:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         for d in range(1,N):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             for j in range(i+1,N):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #                 if A[i]-A[j] == d:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #                     A[i],A[j] = A[j],A[i]
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #                     fir = A[:i+1]
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #                     sec = A[i+1:]
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #                     sec.sort(reverse=True)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #                     fir += sec
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #                     print(*fir)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #                     exit()

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # from collections import defaultdict,deque
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # N = int(input())
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # connected = defaultdict(list)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # for i in range(N):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     a,b = map(int, input().split())
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     connected[a].append(b)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     connected[b].append(a)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # ans = 1
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # done = defaultdict(int)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # done[1] = 1
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # q = deque()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # q.append(1)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # while 0 < len(q):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     now = q.popleft()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     ans = max(ans, now)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     for to in connected[now]:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         if done[to] == 0:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             done[to] = 1
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             q.append(to)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # print(ans)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # N,Q = map(int, input().split())
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # followed = [[False]*(N+1) for _ in range(N+1)]
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # for i in range(Q):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     t,a,b = map(int, input().split())
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     if t == 1:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         followed[a][b] = True
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     elif t == 2:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         followed[a][b] = False
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     else:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         if followed[a][b] and followed[b][a]:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             print("Yes")
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         else:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             print("No")

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # from collections import defaultdict
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # N,Q = map(int, input().split())
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # followed = defaultdict(int)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # for i in range(Q):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     t,a,b = map(int, input().split())
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     if t == 1:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         followed[(a,b)] = 1
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     elif t == 2:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         followed[(a,b)] = 0
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     else:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         if followed[(a,b)] == 1 and followed[(b,a)] == 1:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             print("Yes")
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         else:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             print("No")

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # H,W = map(int, input().split())
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # S = []
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # for i in range(H):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     s = input()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     S.append(s)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # T = []
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # for i in range(H):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     t = input()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     T.append(t)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # for i in range(H):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     if S[i].count("#") != T[i].count("#"):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         print("No")
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         exit()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # print("Yes")

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # N,A,B = map(int, input().split())
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # S = input()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # cnt = 0
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # for i in range(N//2):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     if S[i] != S[N-i-1]:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         if i == 0 and S[i] == S[i+1] and A < B:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             cnt += A
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             S = S[1:]+S[0]
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         else:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             cnt += B
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # print(cnt)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # INF = 1 << 60
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # N,A,B = map(int, input().split())
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # S = list(input())
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # from collections import deque
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # S = deque(S)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # ans = INF
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # for a in range(N):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     b = 0
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     for i in range(N//2):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         if S[i] != S[N-i-1]:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             b += 1
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     ans = min(a*A+b*B, ans)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     move = S.popleft()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     S.append(move)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # print(ans)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # from collections import deque
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # N,M = map(int, input().split())
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # connected = [[] for _ in range(N+1)]
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # tmp = 0
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # for i in range(M):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     u,v = map(int, input().split())
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     connected[u].append(v)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     connected[v].append(u)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # q = deque()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # q.append(1)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # done = [False]*(N+1)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # while len(q) > 0:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     now = q.popleft()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     done[now] = True
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     for to in connected[now]:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         if to not in done:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             if abs(now-to) >= 2:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #                 print("No")
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #                 exit()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             else:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #                 q.append(to)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # print("Yes")

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # from collections import deque
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # N,M = map(int, input().split())
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # connected = [[] for _ in range(N+1)]
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # for i in range(M):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     u,v = map(int, input().split())
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     connected[u].append(v)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     connected[v].append(u)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # beg = None
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # for i in range(1,N+1):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     if len(connected[i]) == 1:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         beg = i
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         break
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # if beg:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     q = deque()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     q.append(beg)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     visited = [False]*(N+1)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     pre = -1
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     while len(q) > 0:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         now = q.popleft()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         if visited[now]:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             print("No")
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             exit()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         visited[now] = True
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         for to in connected[now]:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             if to != pre:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #                 q.append(to)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         pre = now
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     if False in visited[1:]:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         print("No")
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         exit()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # else:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     print("No")
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     exit()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # print("Yes")

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # N,M = map(int, input().split())
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # connected = [[] for _ in range(N+1)]
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # for i in range(M):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     a,b = map(int, input().split())
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     connected[a].append(b)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     connected[b].append(a)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # print(connected)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # from itertools import product

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # N,M = map(int, input().split())
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # C = []
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # for i in range(M):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     c = int(input())
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     nums = set(map(int, input().split()))
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     C.append(nums)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # ans = 0
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # def check(pro):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     tmp = [False]*(N+1)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     for i in range(M):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         if pro[i]:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             for c in C[i]:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #                 tmp[c] = True
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     if False not in tmp[1:]:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         return 1
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     return 0
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # for pro in product((0,1),repeat=M):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     ans += check(pro)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # print(ans)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # def make_divisors(n):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     lower_divisors , upper_divisors = [], []
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     i = 1
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     while i*i <= n:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         if n % i == 0:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             lower_divisors.append(i)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             if i != n // i:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #                 upper_divisors.append(n//i)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         i += 1
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     return len(lower_divisors + upper_divisors[::-1])

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # N = int(input())
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # nums = [0]*N
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # for i in range(1,N):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     nums[i] = make_divisors(i)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # ans = 0
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # for i in range(1,N):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     ab = i
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     cd = N-i
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     ans += nums[ab]*nums[cd]
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # print(ans)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # from itertools import product
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # H,W = map(int, input().split())
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # A = [list(map(int, input().split())) for _ in range(H)]
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # ans = 0
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # st = A[0][0]
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # def check(pro):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     y,x = 0,0
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     done = set()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     done.add(st)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     for i in range(H+W-2):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         if pro[i]:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             x += 1
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         else:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             y += 1
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         if y < H and x < W:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             if A[y][x] in done:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #                 return 0
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             else:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #                 done.add(A[y][x])
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         else:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             return 0
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     return 1
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # for pro in product((0,1),repeat=(H+W-2)):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     ans += check(pro)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # print(ans)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # def make_divisors(n):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     lower_divisors , upper_divisors = [], []
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     i = 1
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     while i*i <= n:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         if n % i == 0:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             lower_divisors.append(i)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             if i != n // i:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #                 upper_divisors.append(n//i)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         i += 1
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     return len(lower_divisors + upper_divisors[::-1])

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # N = int(input())
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # ans = 0
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # for i in range(1,N+1,2):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     if make_divisors(i) == 8:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         ans += 1
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # print(ans)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # S = input()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # app = ['A','C','G','T']
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # ans = 0
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # tmp = 0
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # for s in S:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     if s not in app:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         ans = max(tmp,ans)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         tmp = 0
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     else:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         tmp += 1
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # ans = max(tmp,ans)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # print(ans)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # N,M = map(int, input().split())
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # A = [list(map(int, input().split())) for _ in range(N)]
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # ans = 0
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # for i in range(M):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     for j in range(i+1,M):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         tmp = 0
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         for k in range(N):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             tmp += max(A[k][i],A[k][j])
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         ans = max(ans, tmp)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # print(ans)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # INF = 1 << 60
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # A,B,C,X,Y = map(int, input().split())
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # ans = A*X+B*Y
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # if X > Y:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     ans = min(ans, C*(2*Y)+(X-Y)*A)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # else:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     ans = min(ans, C*(2*X)+(Y-X)*B)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # ans = min(ans, C*(2*max(X,Y)))
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # print(ans)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # N = int(input())
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # points = []
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # for i in range(N):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     point = tuple(map(int, input().split()))
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     points.append(point)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # points.sort()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # ans = 0
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # for i in range(N):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     for j in range(i+1,N):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         x1,y1 = points[i]
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         x2,y2 = points[j]
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         diffx = abs(x2-x1)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         diffy = abs(y2-y1)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         x3 = x1+diffy
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         y3 = y1+diffx
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         x4 = x3+diffx
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         y4 = y3-diffy
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         if (x3,y3) in points and (x4,y4) in points:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             ans = max(ans, diffx**2+diffy**2)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # print(ans)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # n = int(input())
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # ab = [tuple(map(int,input().split())) for _ in range(n)]
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # abset = set(ab)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # ans = 0
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # for i in range(n-1):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     for j in range(i+1,n):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         x1, y1 = ab[i]
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         x2, y2 = ab[j]
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         dx = x2-x1
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         dy = y2-y1
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         if ((x1+dy, y1-dx) in abset) and ((x2+dy, y2-dx) in abset):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             ans = max(ans, dx**2+dy**2)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # print(ans)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # INF = 1 << 60
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # N = int(input())
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # ens = []
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # exs = []
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # for i in range(N):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     a,b = map(int, input().split())
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     ens.append(a)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     exs.append(b)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # ans = INF
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # for en in ens:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     for ex in exs:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         tmp = 0
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         for i in range(N):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             tmp += abs(ens[i]-en)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             tmp += abs(exs[i]-ens[i])
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             tmp += abs(ex-exs[i])
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         ans = min(ans, tmp)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # print(ans)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # N = int(input())
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # wants = []
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # for i in range(N):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     a,b = map(int, input().split())
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     wants.append((a,b))
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # M = int(input())
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # stars = []
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # for i in range(M):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     a,b = map(int, input().split())
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     stars.append((a,b))

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # n = int(input())

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # a = [0]*n
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # b = [0]*n
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # for i in range(n):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     a[i], b[i] = map(int,input().split())

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # m = int(input())
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # c = [0]*m
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # d = [0]*m
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # for i in range(m):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     c[i], d[i] = map(int,input().split())
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # difx = [[0]*m for _ in range(n)]
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # dify = [[0]*m for _ in range(n)]
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # for i in range(n):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     for j in range(m):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         difx[i][j] = c[j]-a[i]
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         dify[i][j] = d[j]-b[i]
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # ansx = difx[0]
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # ansy = dify[0]
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #ここで全てのdifの値にある共通ポイントを見つけ出していっている
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # for i in range(n-1):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     ansx = set(ansx) & set(difx[i+1])
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     ansy = set(ansy) & set(dify[i+1])
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # ansx = list(ansx)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # ansy = list(ansy)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # print(*ansx, *ansy)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # from itertools import product
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # N = int(input())
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # A = list(map(int, input().split()))
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # M = int(input())
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # B = list(map(int, input().split()))
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # ans = [False]*M
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # def check(pro):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     total = 0
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     for i in range(N):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         if pro[i]:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             total += A[i]
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     for i,a in enumerate(B):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         if total == a:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             ans[i] = True
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # for pro in product((0,1), repeat=N):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     check(pro)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # for i in range(M):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     if ans[i]:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         print("yes")
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     else:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         print("no")

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # from itertools import product

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # N,M = map(int, input().split())
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # connected = [[] for _ in range(N)]
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # for i in range(M):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     K,*S = map(int, input().split())
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     for s in S:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         connected[s-1].append(i)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # P = list(map(int,input().split()))
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # def check(pro):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     nums = [0]*M
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     for i in range(N):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         if pro[i]:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             for c in connected[i]:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #                 nums[c] += 1
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     for n,p in zip(nums,P):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         if (n%2) != p:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             return 0
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     return 1
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # ans = 0
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # for pro in product((0,1), repeat=N):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     ans += check(pro)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # print(ans)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # from itertools import product

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # R,C = map(int,input().split())
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # S = [list(map(int, input().split())) for _ in range(R)]
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # def check(pro):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     cnt = 0
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     for i in range(C):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         tmp = 0
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         for j in range(R):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             if pro[j] == 0 and S[j][i] == 0:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #                 tmp += 1
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             elif pro[j] == 1 and S[j][i] == 1:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #                 tmp += 1
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         cnt += max(tmp, R-tmp)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     return cnt
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # ans = 0
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # for pro in product((0,1),repeat=R):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     ans = max(ans, check(pro))
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # print(ans)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # from itertools import product

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # INF = 1 << 60
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # N,K = map(int, input().split())
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # A = list(map(int, input().split()))
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # def check(pro):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     tmp = 0
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     num = 1
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     judge = True
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     for i in range(N):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         if pro[i]:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             if judge:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #                 highest = max(A[:i+1])
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             if highest != A[i]:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #                 judge = False
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #                 num += 1
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #                 highest = A[i]+(highest-A[i]+1)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #                 tmp += (highest-A[i])
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     maxe = A[0]
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     for i in range(1,N):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         if A[i] > maxe:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             maxe = A[i]
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             num += 1
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     if num >= K:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         return tmp
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     else:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         return INF
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # ans = INF
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # for pro in product((0,1), repeat = N):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     ans = min(ans, check(pro))
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # print(ans)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # from itertools import product

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # INF = 1 << 60
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # N,K = map(int, input().split())
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # A = list(map(int, input().split()))
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # def check(pro):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     cnt = 0
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     highest = A[0]
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     view = 0
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     for i in range(N-1):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         if pro[i]:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             if highest < A[i+1]:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #                 highest = A[i+1]
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             else:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #                 highest += 1
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #                 cnt += (highest-A[i+1])
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             view += 1
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         else:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             if highest < A[i+1]:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #                 highest = A[i+1]
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #                 view += 1
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     if view + 1 >= K:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         return cnt
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     else:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         return INF
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # ans = INF
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # for pro in product((0,1),repeat=N-1):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     ans = min(ans, check(pro))
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # print(ans)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # from itertools import permutations
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # import math

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # N = int(input())
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # arr = [i for i in range(N)]
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # X = []
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Y = []
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # for i in range(N):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     x,y = map(int, input().split())
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     X.append(x)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     Y.append(y)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # cnt = 0
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # arr = list(permutations(arr))
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # for a in arr:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     tmp = 0
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     for i in range(N-1):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         tmp += math.sqrt((X[a[i]]-X[a[i+1]])**2+(Y[a[i]]-Y[a[i+1]])**2)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     cnt += tmp
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # print(cnt/len(arr))

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # from itertools import permutations

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # N = int(input())
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # P = tuple(map(int, input().split()))
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Q = tuple(map(int, input().split()))
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # arr = [i for i in range(1,N+1)]
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # arr = list(permutations(arr))
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # a = 0
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # b = 0
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # for i,ar in enumerate(arr):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     if ar == P:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         a = i+1
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     if ar == Q:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         b = i+1
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # print(abs(a-b))

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # from itertools import permutations
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # k = int(input())
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # rc = [list(map(int,input().split())) for _ in range(k)]
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # for p in permutations(range(8)): # 各行の何列目にQを置くかの順列を生成
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     flag = True # bool判定用
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     for i,j in rc:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         if p[i] != j: # p（生成された順列）が入力値の条件を満たしてるか判定する
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             flag = False
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     if not flag: continue # 上記を満たしていなければさよなら

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     for k in range(8):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         for l in range(8):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             if k == l: continue
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             if abs(p[k] - p[l]) == abs(k - l):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #                 flag = False
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     if flag:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         for i in p:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             ans = ["."]*8
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             ans[i] = "Q"
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             print(i,p,ans)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             print("".join(ans))

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # from itertools import permutations

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # N = int(input())
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Q = [list(map(int, input().split())) for _ in range(N)]
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # for p in permutations(range(8)):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     judge = True
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     for x,y in Q:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         if p[x] != y:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             judge = False
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     if not judge:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         continue
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     for i in range(8):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         for j in range(8):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             if i == j:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #                 continue
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             if abs(p[i] - p[j]) == abs(i-j):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #                 judge = False
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     if judge:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         for i in p:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             ans = ['.']*8
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             ans[i] = "Q"
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             print("".join(ans))
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         exit()

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # N = int(input())
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # S = set(map(int, input().split()))
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Q = int(input())
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # T = list(map(int, input().split()))
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # ans = 0
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # for t in T:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     if t in S:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         ans += 1
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # print(ans)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # import bisect
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # D = int(input())
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # N = int(input())
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # M = int(input())
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # S = [0]
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # for i in range(N-1):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     s = int(input())
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     S.append(s)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # H = [int(input()) for _ in range(M)]
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # S.sort()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # ans = 0
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # for h in H:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     tmp = bisect.bisect_left(S,h)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     if tmp == N:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         ans += min(h-S[tmp-1],D-h)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     else:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         ans += min(h-S[tmp-1],S[tmp]-h)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # print(ans)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # import bisect
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # N = int(input())
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # A = sorted(map(int, input().split()))
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # B = list(map(int, input().split()))
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # C = sorted(map(int, input().split()))
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # cnt = 0
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # for b in B:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     upper = bisect.bisect_left(A,b)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     lower = bisect.bisect_right(C,b)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     cnt += upper*(N-lower)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # print(cnt)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # import bisect

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # N = int(input())
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # H = []
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # S = []
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # for i in range(N):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     h,s = map(int, input().split())
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     H.append(h)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     S.append(s)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # n = int(input())
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # h = [0]*n
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # s = [0]*n
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # for i in range(n):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     h[i], s[i] = map(int,input().split())

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # def is_ok(x):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     l = []
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     for i in range(n):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         l.append((x - h[i])//s[i]) # この時間までに割らなきゃいけない
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     print(l,x)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     l.sort() # 小さいものから割る
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     for j in range(n):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         print(l[j],j)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         if (l[j] < j):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             return False # アウトー
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     return True

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # def meguru_bisect(ng, ok):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     while (abs(ok - ng) > 1):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         mid = (ok + ng) // 2
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         if is_ok(mid):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             ok = mid
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         else:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             ng = mid
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     return ok

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # print(meguru_bisect(0, 10**18))

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # P = float(input())
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # def func(x):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     return x + P/2**(x/1.5)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # maxe = 1000
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # mini = 0
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # while maxe-mini > 0.000000001:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     midL = (maxe-mini)/3+mini
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     midR = (maxe-mini)*2/3+mini
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     if func(midL) >= func(midR):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         mini = midL
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     else:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         maxe = midR
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # print(func(maxe))

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # import bisect
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # N,M = map(int, input().split())
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # points = sorted([int(input()) for _ in range(N)])
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # ans = 0
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # for i in range(4):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     tmp = bisect.bisect_left(points,M)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     M -= points[tmp-1]
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     if M < 0:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         print(ans)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         exit()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     ans += points[tmp-1]
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # print(ans)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # from bisect import bisect_left

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # N,M = map(int, input().split())
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # P = [0]+[int(input()) for _ in range(N)]
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # C = []
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # for i in range(N+1):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     for j in range(i,N+1):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         C.append(P[i]+P[j])
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # C.sort()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # ans = 0
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # for c in C:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     if c > M:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         break
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     idx = bisect_left(C,M+1-c)-1
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     if idx < 0:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         idx += 1
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     ans = max(ans, c+C[idx])
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # print(ans)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # import sys
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # sys.setrecursionlimit(10**6)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # def dfs(i):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     global cnt
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     cnt += 1
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     In[i] = cnt
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     done[i] = True
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     for c in connected[i]:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         if not done[c]:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             dfs(c)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     cnt += 1
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     Out[i] = cnt
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # N = int(input())
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # connected = [[] for _ in range(N+1)]
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # for i in range(N):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     u,k,*V = list(map(int, input().split()))
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     for v in V:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         connected[u].append(v)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # In = [0]*(N+1)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Out = [0]*(N+1)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # done = [False]*(N+1)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # cnt = 0
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # for i in range(1,N+1):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     if done[i]:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         continue
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     dfs(i)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # for i in range(1,N+1):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     print(i, In[i], Out[i])

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # import sys
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # sys.setrecursionlimit(10**6)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # cnts = []
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # while True:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     def dfs(i,j):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         visited[i][j] = True
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         for dy in range(-1,2):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             for dx in range(-1,2):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #                 if 0<= i+dy < H and 0<= j+dx < W:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #                     if C[i][j] == 1:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #                         if not visited[i+dy][j+dx]:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #                             dfs(i+dy,j+dx)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     W,H = map(int, input().split())
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     if W == 0:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         break
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     C = [list(map(int, input().split())) for _ in range(H)]
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     cnt = 0
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     visited = [[False]*W for _ in range(H)]
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     for i in range(H):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         for j in range(W):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             if C[i][j] == 1:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #                 if visited[i][j]:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #                     continue
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #                 dfs(i,j)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #                 cnt += 1
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     cnts.append(cnt)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # for cs in cnts:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     print(cs)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # import sys
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # sys.setrecursionlimit(10**6)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # def dfs(p,x):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     cnt[p]+=x
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     visited[p] = True
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     for c in connected[p]:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         if not visited[c]:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             dfs(c,x)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # N,Q = map(int, input().split())
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # connected = [[] for _ in range(N+1)]
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # for i in range(N-1):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     a,b = map(int, input().split())
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     connected[a].append(b)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # cnt = [0]*(N+1)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # for i in range(Q):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     p,x = map(int, input().split())
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     visited = [False]*(N+1)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     dfs(p,x)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # print(*cnt[1:])

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # import sys
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # sys.setrecursionlimit(10**6)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # N = int(input())
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # M = int(input())
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # S = [list(map(int, input().split())) for _ in range(M)]
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # ans = 0
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # moves = [(1,0),(-1,0),(0,1),(0,-1)]
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # def dfs(i,j,num):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     cnt = num
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     visited[i][j] = True
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     for dy,dx in moves:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         if 0<=dy+i<M and 0<=dx+j<N:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             if S[dy+i][dx+j] == 1 and visited[dy+i][dx+j] == False:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #                 cnt = max(cnt, dfs(dy+i,dx+j,num+1))
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     visited[i][j] = False
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     return cnt
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # for i in range(M):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     for j in range(N):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         if S[i][j] == 1:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             visited = [[False]*N for _ in range(M)]
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             ans = max(ans, dfs(i,j,1))
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # print(ans)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # from collections import deque

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # N = int(input())
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # connected = []
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # for i in range(N):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     u,k,*V = list(map(int, input().split()))
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     connected.append(V)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # visited = [-1]*N
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # q = deque()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # cnt = 0
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # q.append((0,cnt))
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # while q:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     now,tmp = q.popleft()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     if visited[now] == -1:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         visited[now] = tmp
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         for c in connected[now]:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             q.append((c-1,tmp+1))
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # for i,v in enumerate(visited):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     print(i+1,v)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # from collections import deque

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # R,C = map(int, input().split())
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Sy,Sx = map(int, input().split())
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Gy,Gx = map(int, input().split())
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Sy -= 1
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Sx -= 1
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Gy -= 1
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # Gx -= 1
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # S = [input() for _ in range(R)]
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # moves = [(0,1),(0,-1),(1,0),(-1,0)]
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # cnt = 0
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # q = deque()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # q.append((Sy,Sx,cnt))
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # visited = [[-1]*C for _ in range(R)]
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # while q:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     y,x,tmp = q.popleft()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     if visited[y][x] == -1:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         visited[y][x] = tmp
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         for dy,dx in moves:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             if S[y+dy][x+dx] == '.':
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #                 q.append((y+dy,x+dx,tmp+1))
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # print(visited[Gy][Gx])

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # from collections import deque

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # H,W,N = map(int, input().split())
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # S = [input() for _ in range(H)]
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # P = [[] for _ in range(N+1)]
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # for i in range(H):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     for j in range(W):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         if S[i][j] == 'S':
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             P[0].append((i,j,0))
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         elif S[i][j] != "." and S[i][j] != "X":
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             P[int(S[i][j])].append((i,j,0))
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # moves = [(0,1),(0,-1),(1,0),(-1,0)]
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # cnt = 0
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # for i in range(N):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     visited = [[-1]*W for _ in range(H)]
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     q = deque()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     q.append(P[i][0])
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     while q:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         y,x,tmp = q.popleft()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         if visited[y][x] == -1:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             visited[y][x] = tmp
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             for dy,dx in moves:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #                 if 0<=y+dy<H and 0<=x+dx<W:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #                     if S[y+dy][x+dx] != "X":
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #                         q.append((y+dy,x+dx,tmp+1))
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     cnt += visited[P[i+1][0][0]][P[i+1][0][1]]
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # print(cnt)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # from collections import deque
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # w, h = map(int,input().split())
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # grid = [['0'] * (w + 2) for _ in range(h + 2)]

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # for i in range(h):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     S = list(input())
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     for j in range(w):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         grid[i + 1][j + 1] = S[2 * j] # 文字列で取ってるので ' ' も含まれるから 2 * j とする

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # check = [[-1] * (w + 2) for _ in range(h + 2)]
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # d = [[1, 0], [-1, 0], [0, 1], [0, -1]] # 行けるかどうかチェックする際に使用する４方向の変化量
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # q = deque()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # q.append([0, 0])
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # check[0][0] = 0

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # odd_d = [[-1, 0], [0, -1], [1, 0], [1, 1], [0, 1], [-1, 1]] # 奇数行６近傍の変化量 (y, x)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # even_d = [[-1, -1], [0, -1], [1, -1], [1, 0], [0, 1], [-1, 0]] # 偶数行６近傍の変化量 (y, x)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # BFSで行ける場所を調べ上げる（-1 = 行けない, 0 = 行ける）
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # while q:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     v = q.popleft()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     if v[0] % 2 == 0:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         for i, j in even_d: # (dy, dx)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             if not (0 <= v[0] + i <= h + 1 and 0 <= v[1] + j <= w + 1): continue # 範囲外は調べない
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             if grid[v[0] + i][v[1] + j] == '1': continue # 行く先が建物である場合には調べない
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             if check[v[0] + i][v[1] + j] != -1: continue # 既にチェック済みの場所は調べない
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             q.append([v[0] + i, v[1] + j])
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             check[v[0] + i][v[1] + j] = 0
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     else: # v[0] % 2 == 1:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         for i, j in odd_d: # (dy, dx)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             if not (0 <= v[0] + i <= h + 1 and 0 <= v[1] + j <= w + 1): continue # 範囲外は調べない
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             if grid[v[0] + i][v[1] + j] == '1': continue # 行く先が建物である場合には調べない
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             if check[v[0] + i][v[1] + j] != -1: continue # 既にチェック済みの場所は調べない
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             q.append([v[0] + i, v[1] + j])
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             check[v[0] + i][v[1] + j] = 0
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # print(grid)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # 周囲全てが黒で覆われているものは１に書き換える（入力例１だと (3, 2) など）
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # for i in range(1, h + 1):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     for j in range(1, w + 1):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         if check[i][j] == -1: # checkが -1 であれば全ての周囲が建物であるので'1'に置き換える
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             grid[i][j] = '1'
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # ans = 0

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # for i in range(1, h + 1):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     for j in range(1, w + 1):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         if grid[i][j] == '1': # 今いるマスが建物であれば計算を開始する
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             cnt = 0
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             if i % 2 == 0: # 偶数行のとき（even_dを使うとき）
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # #                 for k in range(6):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # #                     if grid[i + even_d[k][0]][j + even_d[k][1]] == '1':
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # #                         cnt += 1
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             else: # 奇数行のとき（odd_dを使うとき）
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # #                 for k in range(6):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # #                     if grid[i + odd_d[k][0]][j + odd_d[k][1]] == '1':
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # #                         cnt += 1
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             print(cnt)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             ans += 6 - cnt # ６箇所のうち建物である場所を引けば装飾するべき場所が求まる
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # print(ans)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # from collections import deque

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # INF = 1<<60
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # moves = [(0,1),(0,-1),(1,0),(-1,0)]
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # while True:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     W,H = map(int, input().split())
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     if W == 0:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         break
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     Vert = []
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     Hori = []
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     for i in range(H*2-1):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         inp = list(map(int, input().split()))
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         if i % 2 == 0:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             Vert.append([0]+inp)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         else:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             Hori.append(inp)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     visited = [[INF]*W for _ in range(H)]
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     cnt = 1
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     q = deque()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     q.append((0,0,cnt))
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     print(Vert,Hori)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # #     while q:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         y,x,tmp = q.popleft()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # #         if tmp < visited[y][x]:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             visited[y][x] = tmp
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # #             for dy,dx in moves:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # #                 if 0<=y+dy<H and 0<=x+dx<W:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # #                     if 

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # from collections import deque
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # while True:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # #     w, h = map(int,input().split())
# # # # # # # # # # # # # # # # # # # # # # # # # # # # #     if (w, h) == (0, 0):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # #         exit()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # #     x = [[0] * w for _ in range(h - 1)] # 横線の障害物（0 = 何もない, 1 = 壁あり）
# # # # # # # # # # # # # # # # # # # # # # # # # # # # #     y = [[0] * (w - 1) for _ in range(h)] # 縦線の障害物（0 = 何もない, 1 = 壁あり）

# # # # # # # # # # # # # # # # # # # # # # # # # # # # #     for i in range(2 * h - 1): # 入力を受け取る
# # # # # # # # # # # # # # # # # # # # # # # # # # # # #         S = list(map(int,input().split()))
# # # # # # # # # # # # # # # # # # # # # # # # # # # # #         if i % 2 == 0: # 縦線の有無
# # # # # # # # # # # # # # # # # # # # # # # # # # # # #             for j in range(w - 1):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # #                 y[i // 2][j] = S[j]
# # # # # # # # # # # # # # # # # # # # # # # # # # # # #         else: # 横線の有無
# # # # # # # # # # # # # # # # # # # # # # # # # # # # #             for j in range(w):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # #                 x[i // 2][j] = S[j]
# # # # # # # # # # # # # # # # # # # # # # # # # # # # #     dist = [[10000] * w for _ in range(h)] # 初期値は10000で設定（boolの役割も果たせる）
# # # # # # # # # # # # # # # # # # # # # # # # # # # # #     dist[0][0] = 1 # スター地点は距離１でいける
# # # # # # # # # # # # # # # # # # # # # # # # # # # # #     q = deque()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # #     q.append([0, 0]) # スタート地点は左上の[0, 0]（y・x）
# # # # # # # # # # # # # # # # # # # # # # # # # # # # #     d = [[1, 0], [-1, 0], [0, 1], [0, -1]] # ４方向に対する変化量
# # # # # # # # # # # # # # # # # # # # # # # # # # # # #     while q:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # #         v = q.popleft()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # #         for dy, dx in d:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # #             if not (0 <= v[0] + dy <= h - 1 and 0 <= v[1] + dx <= w - 1): continue # 範囲外であれば調べない
# # # # # # # # # # # # # # # # # # # # # # # # # # # # #             if dist[v[0] + dy][v[1] + dx] != 10000: continue # 既にチェック済みの場所は調べない
# # # # # # # # # # # # # # # # # # # # # # # # # # # # #             if dx == 0: #今調べてるのが縦（y）方向に行けるかどうかの場合
# # # # # # # # # # # # # # # # # # # # # # # # # # # # #                 if dy >= 0:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # #                     if x[v[0]][v[1]] == 1: continue # 壁のときは行けないので調べない
# # # # # # # # # # # # # # # # # # # # # # # # # # # # #                 else:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # #                     if x[v[0] + dy][v[1]] == 1: continue # 壁のときは行けないので調べない
# # # # # # # # # # # # # # # # # # # # # # # # # # # # #                 dist[v[0] + dy][v[1] + dx] = dist[v[0]][v[1]] + 1 # 今いる場所 +1 する
# # # # # # # # # # # # # # # # # # # # # # # # # # # # #                 q.append([v[0] + dy, v[1] + dx]) # 新たに行けた場所をdequeに追加する               
# # # # # # # # # # # # # # # # # # # # # # # # # # # # #             else: #今調べてるのが横（x）方向に行けるかどうかの場合
# # # # # # # # # # # # # # # # # # # # # # # # # # # # #                 if dx >= 0:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # #                     if y[v[0]][v[1]] == 1: continue # 壁のときは行けないので調べない
# # # # # # # # # # # # # # # # # # # # # # # # # # # # #                 else:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # #                     if y[v[0]][v[1] + dx] == 1: continue # 壁のときは行けないので調べない
# # # # # # # # # # # # # # # # # # # # # # # # # # # # #                 dist[v[0] + dy][v[1] + dx] = dist[v[0]][v[1]] + 1 # 今いる場所 +1 する
# # # # # # # # # # # # # # # # # # # # # # # # # # # # #                 q.append([v[0] + dy, v[1] + dx]) # 新たに行けた場所をdequeに追加する

# # # # # # # # # # # # # # # # # # # # # # # # # # # # #     if dist[-1][-1] == 10000: # 更新されてない場合は行けないことを意味している
# # # # # # # # # # # # # # # # # # # # # # # # # # # # #         print(0)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # #     else:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # #         print(dist[-1][-1])

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # from collections import deque

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # H,W = map(int, input().split())
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # S = [input() for _ in range(H)]
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # cnt = 0
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # for s in S:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # #     cnt += s.count('#')
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # visited = [[-1]*(W) for _ in range(H)]
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # visited[0][0] = 1
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # q = deque()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # q.append((0,0))
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # moves = [(0,1),(0,-1),(1,0),(-1,0)]
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # while q:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # #     y,x = q.popleft()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # #     for dy,dx in moves:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # #         if 0<=y+dy<H and 0<=x+dx<W:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # #             if S[y+dy][x+dx] == '.' and visited[y+dy][x+dx] == -1:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # #                 visited[y+dy][x+dx] = visited[y][x] + 1
# # # # # # # # # # # # # # # # # # # # # # # # # # # # #                 q.append((y+dy,x+dx))
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # if visited[-1][-1] == -1:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # #     print(-1)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # #     exit()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # print(H*W-visited[-1][-1]-cnt)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # N = int(input())
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # dp = [1,1]
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # for i in range(2,N+1):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # #     dp.append(dp[i-1]+dp[i-2])
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # print(dp[-1])

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # N,W = map(int, input().split())
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # dp = [[0]*(W+1) for _ in range(N+1)]
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # for i in range(1,N+1):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # #     v,w = map(int, input().split())
# # # # # # # # # # # # # # # # # # # # # # # # # # # # #     for j in range(W+1):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # #         if j-w < 0:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # #             dp[i][j] = dp[i-1][j]
# # # # # # # # # # # # # # # # # # # # # # # # # # # # #         else:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # #             dp[i][j] = max(dp[i-1][j],dp[i-1][j-w]+v)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # print(dp[-1][-1])

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # N,W = map(int, input().split())
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # dp = [[0]*(W+1) for _ in range(N+1)]
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # for i in range(1,N+1):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # #     v,w = map(int, input().split())
# # # # # # # # # # # # # # # # # # # # # # # # # # # # #     for j in range(W+1):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # #         if j-w<0:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # #             dp[i][j] = dp[i-1][j]
# # # # # # # # # # # # # # # # # # # # # # # # # # # # #         else:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # #             dp[i][j] = max(dp[i-1][j],dp[i][j-w]+v)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # print(dp[-1][-1])

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # INF = 1<<60

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # N,M = map(int, input().split())
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # C = [0]+list(map(int, input().split()))
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # dp = [[INF]*(N+1) for _ in range(M+1)]
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # dp[0][0] = 0
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # for i in range(1,M+1):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # #     for j in range(N+1):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # #         if j-C[i] < 0:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # #             dp[i][j] = dp[i-1][j]
# # # # # # # # # # # # # # # # # # # # # # # # # # # # #         else:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # #             dp[i][j] = min(dp[i-1][j],dp[i-1][j-C[i]]+1,dp[i][j-C[i]]+1)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # print(dp[-1][-1])

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # N = int(input())
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # ans = []
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # for i in range(N):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # #     X = list(input())
# # # # # # # # # # # # # # # # # # # # # # # # # # # # #     Y = list(input())
# # # # # # # # # # # # # # # # # # # # # # # # # # # # #     dp = [0]*(len(Y)+1)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # #     for x in X:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # #         bef = dp[:]
# # # # # # # # # # # # # # # # # # # # # # # # # # # # #         for j in range(1,len(Y)+1):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # #             if x == Y[j-1]:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # #                 dp[j] = bef[j-1]+1
# # # # # # # # # # # # # # # # # # # # # # # # # # # # #             elif dp[j] < dp[j-1]:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # #                 dp[j] = dp[j-1]
# # # # # # # # # # # # # # # # # # # # # # # # # # # # #     ans.append(dp[-1])
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # for a in ans:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # #     print(a)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # This is answer of LCS
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # def lcs(s, t):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # #     n, m = len(s), len(t)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # #     dp = [0 for _ in range(m + 1)]
# # # # # # # # # # # # # # # # # # # # # # # # # # # # #     for i in range(n):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # #         mem = dp[:]
# # # # # # # # # # # # # # # # # # # # # # # # # # # # #         for j in range(m):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # #             if s[i] == t[j]:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # #                 dp[j + 1] = mem[j] + 1
# # # # # # # # # # # # # # # # # # # # # # # # # # # # #             elif dp[j + 1] < dp[j]:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # #                 dp[j + 1] = dp[j]
# # # # # # # # # # # # # # # # # # # # # # # # # # # # #     return dp[m]


# # # # # # # # # # # # # # # # # # # # # # # # # # # # # if __name__ == '__main__':
# # # # # # # # # # # # # # # # # # # # # # # # # # # # #     Q = int(input())
# # # # # # # # # # # # # # # # # # # # # # # # # # # # #     for _ in range(Q):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # #         s = input().strip()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # #         t = input().strip()
# # # # # # # # # # # # # # # # # # # # # # # # # # # # #         print(lcs(s, t))

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # N = int(input())
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # *A,num = list(map(int, input().split()))
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # cnt = 0
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # dp = [[0]*(21) for _ in range(N)]
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # dp[0][A[0]] += 1
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # for i in range(1,N-1):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # #     for j in range(21):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # #         if dp[i-1][j] > 0:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # #             if 0<= j+A[i] <= 20:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # #                 dp[i][j+A[i]] = dp[i][j]+1
# # # # # # # # # # # # # # # # # # # # # # # # # # # # #             if 0<= j-A[i] <= 20:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # #                 dp[i][j-A[i]] = dp[i][j]+1
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # print(dp)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # N = int(input())
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # A = list(map(int, input().split()))
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # M = 20
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # dp = [[0]*(M+1) for _ in range(N-1)]
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # dp[0][A[0]] = 1
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # A = A[1:]
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # for n in range(N-2):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # #     for m in range(M+1):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # #         if m-A[n] >= 0:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # #             dp[n+1][m] += dp[n][m-A[n]]
# # # # # # # # # # # # # # # # # # # # # # # # # # # # #         if m+A[n] <= M:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # #             dp[n+1][m] += dp[n][m+A[n]]
# # # # # # # # # # # # # # # # # # # # # # # # # # # # #     print(dp)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # print (dp[-1][A[-1]])


# # # # # # # # # # # # # # # # # # # # # # # # # # # # # MOD = 10000

# # # # # # # # # # # # # # # # # # # # # # # # # # # # # N,K = map(int, input().split())
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # dp = [[0]*3 for _ in range(N+1)]
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # lis = {}
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # for i in range(K):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # #     a,b = map(int, input().split())
# # # # # # # # # # # # # # # # # # # # # # # # # # # # #     lis[a] = b-1
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # if 1 in lis:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # #     dp[1][lis[1]] += 1
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # else:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # #     for i in range(3):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # #         dp[1][i] += 1
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # for i in range(2,N+1):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # #     if i in lis:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # #         dp[i][lis[i]] += (dp[i-1][lis[i]]-dp[i-2][lis[i]])
# # # # # # # # # # # # # # # # # # # # # # # # # # # # #         dp[i][lis[i]] += dp[i-1][(lis[i]+1)%3]
# # # # # # # # # # # # # # # # # # # # # # # # # # # # #         dp[i][lis[i]] += dp[i-1][(lis[i]+2)%3]
# # # # # # # # # # # # # # # # # # # # # # # # # # # # #     else:
# # # # # # # # # # # # # # # # # # # # # # # # # # # # #         for j in range(3):
# # # # # # # # # # # # # # # # # # # # # # # # # # # # #             dp[i][j] += (dp[i-1][j]-dp[i-2][j])
# # # # # # # # # # # # # # # # # # # # # # # # # # # # #             dp[i][j] += (dp[i-1][(j+1)%3])
# # # # # # # # # # # # # # # # # # # # # # # # # # # # #             dp[i][j] += (dp[i-1][(j+2)%3])
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # print(dp)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # MOD = 10**4
# # # # # # # # # # # # # # # # # # # # # # # # # # # # N,K = map(int, input().split())
# # # # # # # # # # # # # # # # # # # # # # # # # # # # decided = [0]*(N+1)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # for i in range(K):
# # # # # # # # # # # # # # # # # # # # # # # # # # # #     a,b = map(int, input().split())
# # # # # # # # # # # # # # # # # # # # # # # # # # # #     decided[a] = b
# # # # # # # # # # # # # # # # # # # # # # # # # # # # dp = [[0]*(N+1) for _ in range(4)]
# # # # # # # # # # # # # # # # # # # # # # # # # # # # dp[1][0] = 1
# # # # # # # # # # # # # # # # # # # # # # # # # # # # ans = 0
# # # # # # # # # # # # # # # # # # # # # # # # # # # # for i in range(1,N+1):
# # # # # # # # # # # # # # # # # # # # # # # # # # # #     if decided[i] != 0:
# # # # # # # # # # # # # # # # # # # # # # # # # # # #         for j in range(1,4):
# # # # # # # # # # # # # # # # # # # # # # # # # # # #             dp[decided[i]][i] += dp[j][i-1]
# # # # # # # # # # # # # # # # # # # # # # # # # # # #         if i-2>0 and dp[decided[i]][i-1] > 0 and dp[decided[i]][i-2] > 0:
# # # # # # # # # # # # # # # # # # # # # # # # # # # #             dp[decided[i]][i-1] -= dp[decided[i]][i-2]
# # # # # # # # # # # # # # # # # # # # # # # # # # # #             dp[decided[i]][i] -= dp[decided[i]][i-2]
# # # # # # # # # # # # # # # # # # # # # # # # # # # #     else:
# # # # # # # # # # # # # # # # # # # # # # # # # # # #         for j in range(1,4):
# # # # # # # # # # # # # # # # # # # # # # # # # # # #             for k in range(1,4):
# # # # # # # # # # # # # # # # # # # # # # # # # # # #                 dp[j][i] += dp[k][i-1]
# # # # # # # # # # # # # # # # # # # # # # # # # # # #         for j in range(1,4):
# # # # # # # # # # # # # # # # # # # # # # # # # # # #             if i-2>0 and dp[j][i-1] > 0 and dp[j][i-2] > 0:
# # # # # # # # # # # # # # # # # # # # # # # # # # # #                 dp[j][i-1] -= dp[j][i-2]
# # # # # # # # # # # # # # # # # # # # # # # # # # # #                 dp[j][i] -= dp[j][i-2]
# # # # # # # # # # # # # # # # # # # # # # # # # # # #     print(dp)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # for i in range(1,4):
# # # # # # # # # # # # # # # # # # # # # # # # # # # #     ans += dp[i][-1]
# # # # # # # # # # # # # # # # # # # # # # # # # # # # print(ans%MOD)

# # # # # # # # # # # # # # # # # # # # # # # # # # # # D,N = map(int, input().split())
# # # # # # # # # # # # # # # # # # # # # # # # # # # # T = [int(input()) for _ in range(D)]
# # # # # # # # # # # # # # # # # # # # # # # # # # # # C = [list(map(int, input().split())) for _ in range(N)]
# # # # # # # # # # # # # # # # # # # # # # # # # # # # dp = [[0]*(D+1) for _ in range(N)]
# # # # # # # # # # # # # # # # # # # # # # # # # # # # print(dp)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # for i in range(1,N+1):

# # # # # # # # # # # # # # # # # # # # # # # # # # # D,N = map(int, input().split())
# # # # # # # # # # # # # # # # # # # # # # # # # # # temps = [0]+[int(input()) for _ in range(D)]
# # # # # # # # # # # # # # # # # # # # # # # # # # # clothes = [list(map(int, input().split())) for _ in range(N)]
# # # # # # # # # # # # # # # # # # # # # # # # # # # dp = [[0]*(D+1) for _ in range(N)]
# # # # # # # # # # # # # # # # # # # # # # # # # # # for i in range(2,D+1):
# # # # # # # # # # # # # # # # # # # # # # # # # # #     for j in range(N):
# # # # # # # # # # # # # # # # # # # # # # # # # # #         if clothes[j][0] > temps[i] or clothes[j][1] < temps[i]:
# # # # # # # # # # # # # # # # # # # # # # # # # # #             continue
# # # # # # # # # # # # # # # # # # # # # # # # # # #         else:
# # # # # # # # # # # # # # # # # # # # # # # # # # #             tmp = 0
# # # # # # # # # # # # # # # # # # # # # # # # # # #             for k in range(N):
# # # # # # # # # # # # # # # # # # # # # # # # # # #                 if clothes[k][0] > temps[i-1] or clothes[k][1] < temps[i-1]:
# # # # # # # # # # # # # # # # # # # # # # # # # # #                     continue
# # # # # # # # # # # # # # # # # # # # # # # # # # #                 else:
# # # # # # # # # # # # # # # # # # # # # # # # # # #                     tmp = max(tmp, abs(clothes[j][2]-clothes[k][2])+dp[k][i-1])
# # # # # # # # # # # # # # # # # # # # # # # # # # #             dp[j][i] = tmp
# # # # # # # # # # # # # # # # # # # # # # # # # # # ans = 0
# # # # # # # # # # # # # # # # # # # # # # # # # # # for i in range(N):
# # # # # # # # # # # # # # # # # # # # # # # # # # #     ans = max(ans, dp[i][-1])
# # # # # # # # # # # # # # # # # # # # # # # # # # # print(ans)

# # # # # # # # # # # # # # # # # # # # # # # # # # D,N = map(int, input().split())
# # # # # # # # # # # # # # # # # # # # # # # # # # T = [0] + [int(input()) for _ in range(D)]
# # # # # # # # # # # # # # # # # # # # # # # # # # C = [list(map(int, input().split())) for _ in range(N)]
# # # # # # # # # # # # # # # # # # # # # # # # # # dp = [[0]*(D+1) for _ in range(N)]
# # # # # # # # # # # # # # # # # # # # # # # # # # for i in range(2,D+1):
# # # # # # # # # # # # # # # # # # # # # # # # # #     for j in range(N):
# # # # # # # # # # # # # # # # # # # # # # # # # #         if C[j][0] > T[i] or C[j][1] < T[i]:
# # # # # # # # # # # # # # # # # # # # # # # # # #             continue
# # # # # # # # # # # # # # # # # # # # # # # # # #         else:
# # # # # # # # # # # # # # # # # # # # # # # # # #             tmp = 0
# # # # # # # # # # # # # # # # # # # # # # # # # #             for k in range(N):
# # # # # # # # # # # # # # # # # # # # # # # # # #                 if C[k][0] > T[i-1] or C[k][1] < T[i-1]:
# # # # # # # # # # # # # # # # # # # # # # # # # #                     continue
# # # # # # # # # # # # # # # # # # # # # # # # # #                 else:
# # # # # # # # # # # # # # # # # # # # # # # # # #                     tmp = max(tmp, abs(C[j][2]-C[k][2])+dp[k][i-1])
# # # # # # # # # # # # # # # # # # # # # # # # # #             dp[j][i] = tmp
# # # # # # # # # # # # # # # # # # # # # # # # # # ans = 0
# # # # # # # # # # # # # # # # # # # # # # # # # # for i in range(N):
# # # # # # # # # # # # # # # # # # # # # # # # # #     ans = max(ans, dp[i][-1])
# # # # # # # # # # # # # # # # # # # # # # # # # # print(ans)

# # # # # # # # # # # # # # # # # # # # # # # # # # INF = 1<<60
# # # # # # # # # # # # # # # # # # # # # # # # # # N,M = map(int, input().split())
# # # # # # # # # # # # # # # # # # # # # # # # # # D = [0]+[int(input()) for _ in range(N)]
# # # # # # # # # # # # # # # # # # # # # # # # # # C = [0]+[int(input()) for _ in range(M)]
# # # # # # # # # # # # # # # # # # # # # # # # # # dp = [[INF]*(M+1) for _ in range(N+1)]
# # # # # # # # # # # # # # # # # # # # # # # # # # dp[0][0] = 0
# # # # # # # # # # # # # # # # # # # # # # # # # # # print(dp)
# # # # # # # # # # # # # # # # # # # # # # # # # # for i in range(1,N+1):
# # # # # # # # # # # # # # # # # # # # # # # # # #     for j in range(i,M-N+i+1):
# # # # # # # # # # # # # # # # # # # # # # # # # #             dp[i][j] = min(dp[i-1][:j])+D[i]*C[j]
# # # # # # # # # # # # # # # # # # # # # # # # # # print(min(dp[-1]))

# # # # # # # # # # # # # # # # # # # # # # # # # INF = 1 << 60
# # # # # # # # # # # # # # # # # # # # # # # # # N = int(input())
# # # # # # # # # # # # # # # # # # # # # # # # # S = [list(input()) for _ in range(5)]
# # # # # # # # # # # # # # # # # # # # # # # # # Sa = []
# # # # # # # # # # # # # # # # # # # # # # # # # for i in range(N):
# # # # # # # # # # # # # # # # # # # # # # # # #     tmp = []
# # # # # # # # # # # # # # # # # # # # # # # # #     for j in range(5):
# # # # # # # # # # # # # # # # # # # # # # # # #         tmp.append(S[j][i])
# # # # # # # # # # # # # # # # # # # # # # # # #     Sa.append(tmp)
# # # # # # # # # # # # # # # # # # # # # # # # # dp = [[INF]*(3) for _ in range(N)]
# # # # # # # # # # # # # # # # # # # # # # # # # C = ['W','B','R']
# # # # # # # # # # # # # # # # # # # # # # # # # for i in range(3):
# # # # # # # # # # # # # # # # # # # # # # # # #     dp[0][i] = 5-Sa[0].count(C[i])
# # # # # # # # # # # # # # # # # # # # # # # # # for i in range(1,N):
# # # # # # # # # # # # # # # # # # # # # # # # #     for j in range(3):
# # # # # # # # # # # # # # # # # # # # # # # # #         dp[i][j] = min(dp[i-1][(j+1)%3],dp[i-1][(j+2)%3])+(5-Sa[i].count(C[j]))
# # # # # # # # # # # # # # # # # # # # # # # # # print(min(dp[-1]))

# # # # # # # # # # # # # # # # # # # # # # # # def main():
# # # # # # # # # # # # # # # # # # # # # # # #     ans = []
# # # # # # # # # # # # # # # # # # # # # # # #     N = 10**6
# # # # # # # # # # # # # # # # # # # # # # # #     dp = [10**10]*(N+1)
# # # # # # # # # # # # # # # # # # # # # # # #     dp_odd = [10**10]*(N+1)
# # # # # # # # # # # # # # # # # # # # # # # #     dp[0] = 0
# # # # # # # # # # # # # # # # # # # # # # # #     dp_odd[0] = 0

# # # # # # # # # # # # # # # # # # # # # # # #     for i in range(1,10**3):
# # # # # # # # # # # # # # # # # # # # # # # #         w = i*(i+1)*(i+2)//6
# # # # # # # # # # # # # # # # # # # # # # # #         if N<=w:
# # # # # # # # # # # # # # # # # # # # # # # #             break
# # # # # # # # # # # # # # # # # # # # # # # #         for n in range(N-w):
# # # # # # # # # # # # # # # # # # # # # # # #             # dp[n+w] = min(dp[n]+1,dp[n+w]) # TLE
# # # # # # # # # # # # # # # # # # # # # # # #             new = dp[n] + 1
# # # # # # # # # # # # # # # # # # # # # # # #             if new < dp[n+w]:
# # # # # # # # # # # # # # # # # # # # # # # #                 dp[n+w] = new
# # # # # # # # # # # # # # # # # # # # # # # #         if w&1==1:
# # # # # # # # # # # # # # # # # # # # # # # #             for n in range(N-w):
# # # # # # # # # # # # # # # # # # # # # # # #                 #dp_odd[n+w] = min(dp_odd[n]+1,dp_odd[n+w]) # TLE
# # # # # # # # # # # # # # # # # # # # # # # #                 new = dp_odd[n] + 1
# # # # # # # # # # # # # # # # # # # # # # # #                 if new < dp_odd[n+w]:
# # # # # # # # # # # # # # # # # # # # # # # #                     dp_odd[n+w] = new
# # # # # # # # # # # # # # # # # # # # # # # #     print(dp[:10])
# # # # # # # # # # # # # # # # # # # # # # # #     print(dp_odd[:10])
                    
# # # # # # # # # # # # # # # # # # # # # # # #     while(1):
# # # # # # # # # # # # # # # # # # # # # # # #         S = int(input())
# # # # # # # # # # # # # # # # # # # # # # # #         if S==0:break
# # # # # # # # # # # # # # # # # # # # # # # #         ans.append([dp[S],dp_odd[S]])
# # # # # # # # # # # # # # # # # # # # # # # #     for a,b in ans:
# # # # # # # # # # # # # # # # # # # # # # # #         print(a,b)
# # # # # # # # # # # # # # # # # # # # # # # # if __name__ == '__main__':
# # # # # # # # # # # # # # # # # # # # # # # #     main()

# # # # # # # # # # # # # # # # # # # # # # # # INF = 1<<60
# # # # # # # # # # # # # # # # # # # # # # # # N = int(input())
# # # # # # # # # # # # # # # # # # # # # # # # dp = [[0]*(N+1) for _ in range(N+1)]
# # # # # # # # # # # # # # # # # # # # # # # # a,b = map(int, input().split())
# # # # # # # # # # # # # # # # # # # # # # # # M = [a,b]
# # # # # # # # # # # # # # # # # # # # # # # # for i in range(N-1):
# # # # # # # # # # # # # # # # # # # # # # # #     a,b = map(int, input().split())
# # # # # # # # # # # # # # # # # # # # # # # #     M.append(b)
# # # # # # # # # # # # # # # # # # # # # # # # for l in range(2,N):
# # # # # # # # # # # # # # # # # # # # # # # #     for i in range(1,N-l+1):
# # # # # # # # # # # # # # # # # # # # # # # #         j = i+l-1
# # # # # # # # # # # # # # # # # # # # # # # #         dp[i][j] = INF
# # # # # # # # # # # # # # # # # # # # # # # #         for k in range()

# # # # # # # # # # # # # # # # # # # # # # # INF = 10**10
# # # # # # # # # # # # # # # # # # # # # # # N = int(input())
# # # # # # # # # # # # # # # # # # # # # # # dp = [[INF]*N for _ in range(N)]
# # # # # # # # # # # # # # # # # # # # # # # R = []
# # # # # # # # # # # # # # # # # # # # # # # for n in range(N):
# # # # # # # # # # # # # # # # # # # # # # #     r, c = map(int,input().split())
# # # # # # # # # # # # # # # # # # # # # # #     R.append(r)
# # # # # # # # # # # # # # # # # # # # # # # R.append(c)

# # # # # # # # # # # # # # # # # # # # # # # for i in range(N):
# # # # # # # # # # # # # # # # # # # # # # #     dp[i][i] = 0 # 対角成分すなわち、行列積Miを計算するコストは0である

# # # # # # # # # # # # # # # # # # # # # # # for l in range(1,N): # iとjの差分
# # # # # # # # # # # # # # # # # # # # # # #     for i in range(N-l):
# # # # # # # # # # # # # # # # # # # # # # #         j = i+l    
# # # # # # # # # # # # # # # # # # # # # # #         for k in range(i,j):
# # # # # # # # # # # # # # # # # # # # # # #             # cost(左側行列積) + cost(右側行列積) + 行列計算のコスト
# # # # # # # # # # # # # # # # # # # # # # #             dp[i][j] = min(dp[i][j], dp[i][k]+dp[k+1][j]+R[i]*R[k+1]*R[j+1]) # 初回はR[0]*R[1]*R[2]
# # # # # # # # # # # # # # # # # # # # # # # print (dp[0][-1])

# # # # # # # # # # # # # # # # # # # # # # # N,A,B = map(int, input().split())
# # # # # # # # # # # # # # # # # # # # # # # C = list(map(int, input().split()))
# # # # # # # # # # # # # # # # # # # # # # # print(C.index(A+B)+1)

# # # # # # # # # # # # # # # # # # # # # # N = int(input())
# # # # # # # # # # # # # # # # # # # # # # C = [int(input()) for _ in range(N)]*2
# # # # # # # # # # # # # # # # # # # # # # dp = [[0]*(2*N) for _ in range(2*N)]
# # # # # # # # # # # # # # # # # # # # # # for d in range(N):
# # # # # # # # # # # # # # # # # # # # # #     for l in range(2*N):
# # # # # # # # # # # # # # # # # # # # # #         r = l + d
# # # # # # # # # # # # # # # # # # # # # #         if r >= 2*N:
# # # # # # # # # # # # # # # # # # # # # #             break
        
# # # # # # # # # # # # # # # # # # # # # #         if d == 0:
# # # # # # # # # # # # # # # # # # # # # #             dp[l][r] = C[l]
# # # # # # # # # # # # # # # # # # # # # #         elif d == 1:
# # # # # # # # # # # # # # # # # # # # # #             dp[l][r] = max(C[l], C[r])
# # # # # # # # # # # # # # # # # # # # # #         else:
# # # # # # # # # # # # # # # # # # # # # #             #右をとる
# # # # # # # # # # # # # # # # # # # # # #             if C[l+1] > C[r]:
# # # # # # # # # # # # # # # # # # # # # #                 dp[l][r] = max(dp[l][r], C[l] + dp[l+2][r])
# # # # # # # # # # # # # # # # # # # # # #             else:
# # # # # # # # # # # # # # # # # # # # # #                 dp[l][r] = max(dp[l][r], C[l] + dp[l+1][r-1])
            
# # # # # # # # # # # # # # # # # # # # # #             #左をとる
# # # # # # # # # # # # # # # # # # # # # #             if C[l] > C[r-1]:
# # # # # # # # # # # # # # # # # # # # # #                 dp[l][r] = max(dp[l][r], C[r] + dp[l+1][r-1])
# # # # # # # # # # # # # # # # # # # # # #             else:
# # # # # # # # # # # # # # # # # # # # # #                 dp[l][r] = max(dp[l][r], C[r] + dp[l][r-2])

# # # # # # # # # # # # # # # # # # # # # def solve():
# # # # # # # # # # # # # # # # # # # # #     ans = []
# # # # # # # # # # # # # # # # # # # # #     while(1):
# # # # # # # # # # # # # # # # # # # # #         N = int(input())
# # # # # # # # # # # # # # # # # # # # #         if N==0:
# # # # # # # # # # # # # # # # # # # # #             break
# # # # # # # # # # # # # # # # # # # # #         W = list(map(int,input().split()))
# # # # # # # # # # # # # # # # # # # # #         dp = [[0]*N for _ in range(N)]
# # # # # # # # # # # # # # # # # # # # #         for d in range(1,N):
# # # # # # # # # # # # # # # # # # # # #             for i in range(N-d):
# # # # # # # # # # # # # # # # # # # # #                 j = i+d
# # # # # # # # # # # # # # # # # # # # #                 if d%2==1:
# # # # # # # # # # # # # # # # # # # # #                     print("a")
# # # # # # # # # # # # # # # # # # # # #                     print(i,j,d)
# # # # # # # # # # # # # # # # # # # # #                     if dp[i+1][j-1]==d-1:
# # # # # # # # # # # # # # # # # # # # #                         if abs(W[i] - W[j])<=1:
# # # # # # # # # # # # # # # # # # # # #                             dp[i][j] = d+1 
# # # # # # # # # # # # # # # # # # # # #                         else:
# # # # # # # # # # # # # # # # # # # # #                             dp[i][j] = d-1
# # # # # # # # # # # # # # # # # # # # #                     for k in range(i+1,j):
# # # # # # # # # # # # # # # # # # # # #                         new = dp[i][k]+dp[k+1][j]
# # # # # # # # # # # # # # # # # # # # #                         if new > dp[i][j]:
# # # # # # # # # # # # # # # # # # # # #                             dp[i][j] = new
# # # # # # # # # # # # # # # # # # # # #                 else:
# # # # # # # # # # # # # # # # # # # # #                     print("b")
# # # # # # # # # # # # # # # # # # # # #                     print(i,j,d)
# # # # # # # # # # # # # # # # # # # # #                     dp[i][j] = max(dp[i+1][j], dp[i][j-1])
# # # # # # # # # # # # # # # # # # # # #                 print(dp)
# # # # # # # # # # # # # # # # # # # # #         ans.append(dp[0][-1])
# # # # # # # # # # # # # # # # # # # # #     for a in ans:
# # # # # # # # # # # # # # # # # # # # #         print(a)
# # # # # # # # # # # # # # # # # # # # # solve()

# # # # # # # # # # # # # # # # # # # # # N = int(input())
# # # # # # # # # # # # # # # # # # # # # A = [int(input()) for _ in range(N)]
# # # # # # # # # # # # # # # # # # # # # dp = [0]*(N)

# # # # # # # # # # # # # # # # # # # # # from bisect import bisect
# # # # # # # # # # # # # # # # # # # # # N = int(input())
# # # # # # # # # # # # # # # # # # # # # A = [int(input()) for _ in range(N)]

# # # # # # # # # # # # # # # # # # # # # def LIS(N, A):
# # # # # # # # # # # # # # # # # # # # #     INF = 10**10

# # # # # # # # # # # # # # # # # # # # #     dp = [INF]*(N+1)
# # # # # # # # # # # # # # # # # # # # #     dp[0] = -1
# # # # # # # # # # # # # # # # # # # # #     for a in A:
# # # # # # # # # # # # # # # # # # # # #         # a_iの挿入位置を二分探索で探す
# # # # # # # # # # # # # # # # # # # # #         idx = bisect(dp, a)
# # # # # # # # # # # # # # # # # # # # #         # 部分増加列の長さ+1（INF <= a_i）or dpの有限の要素と入れ替わる
# # # # # # # # # # # # # # # # # # # # #         dp[idx] = min(a, dp[idx])
# # # # # # # # # # # # # # # # # # # # #     return max(i for i in range(N+1) if dp[i] < INF)
# # # # # # # # # # # # # # # # # # # # # print(LIS(N,A))

# # # # # # # # # # # # # # # # # # # # # from bisect import bisect_left
# # # # # # # # # # # # # # # # # # # # # INF = 1<<60
# # # # # # # # # # # # # # # # # # # # # N = int(input())
# # # # # # # # # # # # # # # # # # # # # A = [int(input()) for _ in range(N)]
# # # # # # # # # # # # # # # # # # # # # dp = [INF]*(N+1)
# # # # # # # # # # # # # # # # # # # # # dp[0] = -1
# # # # # # # # # # # # # # # # # # # # # for a in A:
# # # # # # # # # # # # # # # # # # # # #     idx = bisect_left(dp,a)
# # # # # # # # # # # # # # # # # # # # #     dp[idx] = min(a, dp[idx])
# # # # # # # # # # # # # # # # # # # # # print(max(i for i in range(N+1) if dp[i] < INF))

# # # # # # # # # # # # # # # # # # # # # H,W = map(int, input().split())
# # # # # # # # # # # # # # # # # # # # # A = []
# # # # # # # # # # # # # # # # # # # # # Ax = []
# # # # # # # # # # # # # # # # # # # # # Ay = []
# # # # # # # # # # # # # # # # # # # # # Ac = 0
# # # # # # # # # # # # # # # # # # # # # for i in range(H):
# # # # # # # # # # # # # # # # # # # # #     a = input()
# # # # # # # # # # # # # # # # # # # # #     for j in range(W):
# # # # # # # # # # # # # # # # # # # # #         if a[j] == '#':
# # # # # # # # # # # # # # # # # # # # #             Ac += 1
# # # # # # # # # # # # # # # # # # # # #             Ay.append(i)
# # # # # # # # # # # # # # # # # # # # #             Ax.append(j)
# # # # # # # # # # # # # # # # # # # # #     A.append(a)
# # # # # # # # # # # # # # # # # # # # # B = []
# # # # # # # # # # # # # # # # # # # # # Bp = set()
# # # # # # # # # # # # # # # # # # # # # Bc = 0
# # # # # # # # # # # # # # # # # # # # # for i in range(H):
# # # # # # # # # # # # # # # # # # # # #     b = input()
# # # # # # # # # # # # # # # # # # # # #     for j in range(W):
# # # # # # # # # # # # # # # # # # # # #         if b[j] == '#':
# # # # # # # # # # # # # # # # # # # # #             Bc += 1
# # # # # # # # # # # # # # # # # # # # #             Bp.add((i,j))
# # # # # # # # # # # # # # # # # # # # # if Ac != Bc:
# # # # # # # # # # # # # # # # # # # # #     print("No")
# # # # # # # # # # # # # # # # # # # # #     exit()
# # # # # # # # # # # # # # # # # # # # # # print(Ay,Ax,Bp)
# # # # # # # # # # # # # # # # # # # # # for i in range(H+1):
# # # # # # # # # # # # # # # # # # # # #     for j in range(W+1):
# # # # # # # # # # # # # # # # # # # # #         judge = True
# # # # # # # # # # # # # # # # # # # # #         for k in range(Ac):
# # # # # # # # # # # # # # # # # # # # #             if ((Ay[k]-i+H)%H,(Ax[k]-j+W)%W) not in Bp:
# # # # # # # # # # # # # # # # # # # # #                 judge = False
# # # # # # # # # # # # # # # # # # # # #                 break
# # # # # # # # # # # # # # # # # # # # #         if judge:
# # # # # # # # # # # # # # # # # # # # #             print("Yes")
# # # # # # # # # # # # # # # # # # # # #             exit()
# # # # # # # # # # # # # # # # # # # # # print("No")

# # # # # # # # # # # # # # # # # # # # # N = int(input())
# # # # # # # # # # # # # # # # # # # # # S = input()
# # # # # # # # # # # # # # # # # # # # # T = S.count("T")
# # # # # # # # # # # # # # # # # # # # # A = S.count("A")
# # # # # # # # # # # # # # # # # # # # # if T > A:
# # # # # # # # # # # # # # # # # # # # #     print("T")
# # # # # # # # # # # # # # # # # # # # # elif A > T:
# # # # # # # # # # # # # # # # # # # # #     print("A")
# # # # # # # # # # # # # # # # # # # # # else:
# # # # # # # # # # # # # # # # # # # # #     S = S[::-1]
# # # # # # # # # # # # # # # # # # # # #     Tl = S.index("T")
# # # # # # # # # # # # # # # # # # # # #     Al = S.index("A")
# # # # # # # # # # # # # # # # # # # # #     if Tl > Al:
# # # # # # # # # # # # # # # # # # # # #         print("T")
# # # # # # # # # # # # # # # # # # # # #     else:
# # # # # # # # # # # # # # # # # # # # #         print("A")

# # # # # # # # # # # # # # # # # # # # # N = int(input())
# # # # # # # # # # # # # # # # # # # # # A = list(map(int, input().split()))
# # # # # # # # # # # # # # # # # # # # # ans = []
# # # # # # # # # # # # # # # # # # # # # ans.append(A[0])
# # # # # # # # # # # # # # # # # # # # # for i in range(N-1):
# # # # # # # # # # # # # # # # # # # # #     if abs(A[i]-A[i+1]) != 1:
# # # # # # # # # # # # # # # # # # # # #         if A[i] > A[i+1]:
# # # # # # # # # # # # # # # # # # # # #             for j in range(A[i]-1, A[i+1]-1,-1):
# # # # # # # # # # # # # # # # # # # # #                 ans.append(j)
# # # # # # # # # # # # # # # # # # # # #         else:
# # # # # # # # # # # # # # # # # # # # #             for j in range(A[i]+1,A[i+1]+1):
# # # # # # # # # # # # # # # # # # # # #                 ans.append(j)
# # # # # # # # # # # # # # # # # # # # #     else:
# # # # # # # # # # # # # # # # # # # # #         ans.append(A[i+1])
# # # # # # # # # # # # # # # # # # # # # print(*ans)

# # # # # # # # # # # # # # # # # # # from collections import Counter,defaultdict
# # # # # # # # # # # # # # # # # # # S = input()
# # # # # # # # # # # # # # # # # # # T = input()
# # # # # # # # # # # # # # # # # # # Atr = set(['a', 't', 'c', 'o', 'd', 'e', 'r'])
# # # # # # # # # # # # # # # # # # # Sc = Counter(S)
# # # # # # # # # # # # # # # # # # # Tc = Counter(T)
# # # # # # # # # # # # # # # # # # # LessS = defaultdict(int)
# # # # # # # # # # # # # # # # # # # LessT = defaultdict(int)
# # # # # # # # # # # # # # # # # # # for k,v in Sc.items():
# # # # # # # # # # # # # # # # # # #     if k == "@":
# # # # # # # # # # # # # # # # # # #         continue
# # # # # # # # # # # # # # # # # # #     if Tc[k] != v:
# # # # # # # # # # # # # # # # # # #         LessT[k] = (v-Tc[k])
# # # # # # # # # # # # # # # # # # # for k,v in Tc.items():
# # # # # # # # # # # # # # # # # # #     if k == "@":
# # # # # # # # # # # # # # # # # # #         continue
# # # # # # # # # # # # # # # # # # #     if Sc[k] != v:
# # # # # # # # # # # # # # # # # # #         LessS[k] = (v-Sc[k])
# # # # # # # # # # # # # # # # # # # Sh = Sc['@']
# # # # # # # # # # # # # # # # # # # Th = Tc['@']
# # # # # # # # # # # # # # # # # # # for k,v in LessS.items():
# # # # # # # # # # # # # # # # # # #     if k not in Atr:
# # # # # # # # # # # # # # # # # # #         print("No")
# # # # # # # # # # # # # # # # # # #         exit()
# # # # # # # # # # # # # # # # # # #     if Sh >= v:
# # # # # # # # # # # # # # # # # # #         Sh -= v
# # # # # # # # # # # # # # # # # # #     else:
# # # # # # # # # # # # # # # # # # #         print("No")
# # # # # # # # # # # # # # # # # # #         exit()
# # # # # # # # # # # # # # # # # # # for k,v in LessT.items():
# # # # # # # # # # # # # # # # # # #     if k not in Atr:
# # # # # # # # # # # # # # # # # # #         print("No")
# # # # # # # # # # # # # # # # # # #         exit()
# # # # # # # # # # # # # # # # # # #     if Th >= v:
# # # # # # # # # # # # # # # # # # #         Th -= v
# # # # # # # # # # # # # # # # # # #     else:
# # # # # # # # # # # # # # # # # # #         print("No")
# # # # # # # # # # # # # # # # # # #         exit()
# # # # # # # # # # # # # # # # # # # if Sh == Th:
# # # # # # # # # # # # # # # # # # #     print("Yes")
# # # # # # # # # # # # # # # # # # # else:
# # # # # # # # # # # # # # # # # # #     print("No")

# # # # # # # # # # # # # # # # # # # from collections import defaultdict
# # # # # # # # # # # # # # # # # # # S=input()
# # # # # # # # # # # # # # # # # # # T=input()
# # # # # # # # # # # # # # # # # # # Scnt=defaultdict(int)
# # # # # # # # # # # # # # # # # # # Tcnt=defaultdict(int)
# # # # # # # # # # # # # # # # # # # for c in S: Scnt[c]+=1
# # # # # # # # # # # # # # # # # # # for c in T: Tcnt[c]+=1
# # # # # # # # # # # # # # # # # # # print(Scnt)
# # # # # # # # # # # # # # # # # # # print(Tcnt)
# # # # # # # # # # # # # # # # # # # for c in "atcoder":
# # # # # # # # # # # # # # # # # # #     M=max(Scnt[c],Tcnt[c])
# # # # # # # # # # # # # # # # # # #     if Scnt['@']<M-Scnt[c] or Tcnt['@']<M-Tcnt[c]:
# # # # # # # # # # # # # # # # # # #         print("No")
# # # # # # # # # # # # # # # # # # #         exit()
# # # # # # # # # # # # # # # # # # #     Scnt['@']-=M-Scnt[c]
# # # # # # # # # # # # # # # # # # #     Scnt[c]=M
# # # # # # # # # # # # # # # # # # #     Tcnt['@']-=M-Tcnt[c]
# # # # # # # # # # # # # # # # # # #     Tcnt[c]=M
# # # # # # # # # # # # # # # # # # # print(Scnt)
# # # # # # # # # # # # # # # # # # # print(Tcnt)

# # # # # # # # # # # # # # # # # # # print("Yes" if Scnt==Tcnt else "No")

# # # # # # # # # # # # # # # # # # # from heapq import heappop, heappush

# # # # # # # # # # # # # # # # # # # INF = 1<<60
# # # # # # # # # # # # # # # # # # # V,E,r = map(int, input().split())
# # # # # # # # # # # # # # # # # # # connected = [[] for _ in range(V)]
# # # # # # # # # # # # # # # # # # # for i in range(E):
# # # # # # # # # # # # # # # # # # #   s,t,d = map(int, input().split())
# # # # # # # # # # # # # # # # # # #   connected[s].append((t,d))
# # # # # # # # # # # # # # # # # # # ans = [INF]*(V)
# # # # # # # # # # # # # # # # # # # ans[r] = 0
# # # # # # # # # # # # # # # # # # # tmp = [(0,r)]
# # # # # # # # # # # # # # # # # # # visited = [False]*(V)
# # # # # # # # # # # # # # # # # # # while tmp:
# # # # # # # # # # # # # # # # # # #   d,now = heappop(tmp)
# # # # # # # # # # # # # # # # # # #   if(d > ans[now]):
# # # # # # # # # # # # # # # # # # #     continue
# # # # # # # # # # # # # # # # # # #   for to, c in connected[now]:
# # # # # # # # # # # # # # # # # # #     if d + c < ans[to]:
# # # # # # # # # # # # # # # # # # #       ans[to] = d + c
# # # # # # # # # # # # # # # # # # #       heappush(tmp, (ans[to], to))
# # # # # # # # # # # # # # # # # # # for a in ans:
# # # # # # # # # # # # # # # # # # #   if a == INF:
# # # # # # # # # # # # # # # # # # #     print('INF')
# # # # # # # # # # # # # # # # # # #   else:
# # # # # # # # # # # # # # # # # # #     print(a)

# # # # # # # # # # # # # # # # # # # a,b = map(int, input().split())
# # # # # # # # # # # # # # # # # # # if a % b == 0:
# # # # # # # # # # # # # # # # # # #   print(a//b)
# # # # # # # # # # # # # # # # # # # else:
# # # # # # # # # # # # # # # # # # #   print(a//b+1)

# # # # # # # # # # # # # # # # # # # H,W = map(int, input().split())
# # # # # # # # # # # # # # # # # # # S = [input() for _ in range(H)]
# # # # # # # # # # # # # # # # # # # ans = ['s', 'n', 'u', 'k', 'e']
# # # # # # # # # # # # # # # # # # # def r(y,x):
# # # # # # # # # # # # # # # # # # #   for i in range(5):
# # # # # # # # # # # # # # # # # # #     if S[y][x+i] != ans[i]:
# # # # # # # # # # # # # # # # # # #       return False
# # # # # # # # # # # # # # # # # # #   return True
# # # # # # # # # # # # # # # # # # # def l(y,x):
# # # # # # # # # # # # # # # # # # #   for i in range(5):
# # # # # # # # # # # # # # # # # # #     if S[y][x-i] != ans[i]:
# # # # # # # # # # # # # # # # # # #       return False
# # # # # # # # # # # # # # # # # # #   return True
# # # # # # # # # # # # # # # # # # # def u(y,x):
# # # # # # # # # # # # # # # # # # #   for i in range(5):
# # # # # # # # # # # # # # # # # # #     if S[y-i][x] != ans[i]:
# # # # # # # # # # # # # # # # # # #       return False
# # # # # # # # # # # # # # # # # # #   return True
# # # # # # # # # # # # # # # # # # # def d(y,x):
# # # # # # # # # # # # # # # # # # #   for i in range(5):
# # # # # # # # # # # # # # # # # # #     if S[y+i][x] != ans[i]:
# # # # # # # # # # # # # # # # # # #       return False
# # # # # # # # # # # # # # # # # # #   return True
# # # # # # # # # # # # # # # # # # # def ru(y,x):
# # # # # # # # # # # # # # # # # # #   for i in range(5):
# # # # # # # # # # # # # # # # # # #     if S[y-i][x+i] != ans[i]:
# # # # # # # # # # # # # # # # # # #       return False
# # # # # # # # # # # # # # # # # # #   return True
# # # # # # # # # # # # # # # # # # # def rd(y,x):
# # # # # # # # # # # # # # # # # # #   for i in range(5):
# # # # # # # # # # # # # # # # # # #     if S[y+i][x+i] != ans[i]:
# # # # # # # # # # # # # # # # # # #       return False
# # # # # # # # # # # # # # # # # # #   return True
# # # # # # # # # # # # # # # # # # # def lu(y,x):
# # # # # # # # # # # # # # # # # # #   for i in range(5):
# # # # # # # # # # # # # # # # # # #     if S[y-i][x-i] != ans[i]:
# # # # # # # # # # # # # # # # # # #       return False
# # # # # # # # # # # # # # # # # # #   return True
# # # # # # # # # # # # # # # # # # # def ld(y,x):
# # # # # # # # # # # # # # # # # # #   for i in range(5):
# # # # # # # # # # # # # # # # # # #     if S[y+i][x-i] != ans[i]:
# # # # # # # # # # # # # # # # # # #       return False
# # # # # # # # # # # # # # # # # # #   return True
# # # # # # # # # # # # # # # # # # # for i in range(H):
# # # # # # # # # # # # # # # # # # #   for j in range(W):
# # # # # # # # # # # # # # # # # # #     if S[i][j] == 's':
# # # # # # # # # # # # # # # # # # #       if 0<=j+4<W:
# # # # # # # # # # # # # # # # # # #         if r(i,j):
# # # # # # # # # # # # # # # # # # #           for k in range(5):
# # # # # # # # # # # # # # # # # # #             print(i+1,j+k+1)
# # # # # # # # # # # # # # # # # # #           exit()
# # # # # # # # # # # # # # # # # # #       if 0<=j-4<W:
# # # # # # # # # # # # # # # # # # #         if l(i,j):
# # # # # # # # # # # # # # # # # # #           for k in range(5):
# # # # # # # # # # # # # # # # # # #             print(i+1,j-k+1)
# # # # # # # # # # # # # # # # # # #           exit()
# # # # # # # # # # # # # # # # # # #       if 0<=i+4<H:
# # # # # # # # # # # # # # # # # # #         if d(i,j):
# # # # # # # # # # # # # # # # # # #           for k in range(5):
# # # # # # # # # # # # # # # # # # #             print(i+k+1,j+1)
# # # # # # # # # # # # # # # # # # #           exit()
# # # # # # # # # # # # # # # # # # #       if 0<=i-4<H:
# # # # # # # # # # # # # # # # # # #         if u(i,j):
# # # # # # # # # # # # # # # # # # #           for k in range(5):
# # # # # # # # # # # # # # # # # # #             print(i-k+1,j+1)
# # # # # # # # # # # # # # # # # # #           exit()
# # # # # # # # # # # # # # # # # # #       if 0<=i+4<H and 0<=j+4<W:
# # # # # # # # # # # # # # # # # # #         if rd(i,j):
# # # # # # # # # # # # # # # # # # #           for k in range(5):
# # # # # # # # # # # # # # # # # # #             print(i+k+1,j+k+1)
# # # # # # # # # # # # # # # # # # #           exit()
# # # # # # # # # # # # # # # # # # #       if 0<=i-4<H and 0<=j+4<W:
# # # # # # # # # # # # # # # # # # #         if ru(i,j):
# # # # # # # # # # # # # # # # # # #           for k in range(5):
# # # # # # # # # # # # # # # # # # #             print(i-k+1,j+k+1)
# # # # # # # # # # # # # # # # # # #           exit()
# # # # # # # # # # # # # # # # # # #       if 0<=i+4<H and 0<=j-4<W:
# # # # # # # # # # # # # # # # # # #         if ld(i,j):
# # # # # # # # # # # # # # # # # # #           for k in range(5):
# # # # # # # # # # # # # # # # # # #             print(i+k+1,j-k+1)
# # # # # # # # # # # # # # # # # # #           exit()
# # # # # # # # # # # # # # # # # # #       if 0<=i-4<H and 0<=j-4<W:
# # # # # # # # # # # # # # # # # # #         if lu(i,j):
# # # # # # # # # # # # # # # # # # #           for k in range(5):
# # # # # # # # # # # # # # # # # # #             print(i-k+1,j-k+1)
# # # # # # # # # # # # # # # # # # #           exit()

# # # # # # # # # # # # # # # # # # # from itertools import permutations
# # # # # # # # # # # # # # # # # # # N,M = map(int, input().split())
# # # # # # # # # # # # # # # # # # # S = [input() for _ in range(N)]
# # # # # # # # # # # # # # # # # # # lis = [i for i in range(N)]
# # # # # # # # # # # # # # # # # # # lis = list(permutations(lis))
# # # # # # # # # # # # # # # # # # # for l in lis:
# # # # # # # # # # # # # # # # # # #   judge = True
# # # # # # # # # # # # # # # # # # #   for i in range(N-1):
# # # # # # # # # # # # # # # # # # #     tmp = 0
# # # # # # # # # # # # # # # # # # #     for j in range(M):
# # # # # # # # # # # # # # # # # # #       if S[l[i]][j] != S[l[i+1]][j]:
# # # # # # # # # # # # # # # # # # #         tmp += 1
# # # # # # # # # # # # # # # # # # #     if tmp != 1:
# # # # # # # # # # # # # # # # # # #       judge = False
# # # # # # # # # # # # # # # # # # #       break
# # # # # # # # # # # # # # # # # # #   if judge:
# # # # # # # # # # # # # # # # # # #     print("Yes")
# # # # # # # # # # # # # # # # # # #     exit()
# # # # # # # # # # # # # # # # # # # print("No")

# # # # # # # # # # # # # # # # # # # import bisect
# # # # # # # # # # # # # # # # # # # N,M,D = map(int, input().split())
# # # # # # # # # # # # # # # # # # # A = sorted(list(set(list(map(int, input().split())))))
# # # # # # # # # # # # # # # # # # # B = sorted(list(set(list(map(int, input().split())))))
# # # # # # # # # # # # # # # # # # # Bc = len(B)
# # # # # # # # # # # # # # # # # # # ans = -1
# # # # # # # # # # # # # # # # # # # print(A,B)
# # # # # # # # # # # # # # # # # # # for a in A:
# # # # # # # # # # # # # # # # # # #   idx = bisect.bisect_left(B,a)
# # # # # # # # # # # # # # # # # # #   print(a,idx)
# # # # # # # # # # # # # # # # # # #   if idx == Bc:
# # # # # # # # # # # # # # # # # # #     print(abs(B[idx-1] + a))
# # # # # # # # # # # # # # # # # # #     if B[idx-1] - a <= D:
# # # # # # # # # # # # # # # # # # #       ans = max(ans,abs(B[idx-1]+a))
# # # # # # # # # # # # # # # # # # #   else:
# # # # # # # # # # # # # # # # # # #     print(abs(B[idx] + a))
# # # # # # # # # # # # # # # # # # #     if B[idx] - a <= D:
# # # # # # # # # # # # # # # # # # #       ans = max(ans,abs(B[idx]+a))
# # # # # # # # # # # # # # # # # # # print(ans)

# # # # # # # # # # # # # # # # # # import heapq
# # # # # # # # # # # # # # # # # # INF = 10**10

# # # # # # # # # # # # # # # # # # V, E, r = map(int,input().split())
# # # # # # # # # # # # # # # # # # adj = [[] for i in range(V)] # 隣接リスト

# # # # # # # # # # # # # # # # # # for e in range(E):
# # # # # # # # # # # # # # # # # #     s, t, d = map(int,input().split())
# # # # # # # # # # # # # # # # # #     adj[s].append((t,d))

# # # # # # # # # # # # # # # # # # dists  = [INF for i in range(V)] # 重みの和
# # # # # # # # # # # # # # # # # # dists[r] = 0
# # # # # # # # # # # # # # # # # # pq = [(0, r)] # 二分ヒープの実体はリストやタプルとして表現する
# # # # # # # # # # # # # # # # # #             # (重みの和, ノード番号)
# # # # # # # # # # # # # # # # # # while(pq):
# # # # # # # # # # # # # # # # # #     d, node = heapq.heappop(pq)
# # # # # # # # # # # # # # # # # #     if (d > dists[node]): # 探索の対象にする必要があるか確認
# # # # # # # # # # # # # # # # # #         continue
# # # # # # # # # # # # # # # # # #     for next, cost in adj[node]:
# # # # # # # # # # # # # # # # # #         if d + cost < dists[next]:# 探索の対象にする必要があるか確認
# # # # # # # # # # # # # # # # # #             dists[next] = d + cost # 次のノードにおける重みの和
# # # # # # # # # # # # # # # # # #             heapq.heappush(pq, (dists[next],next))
# # # # # # # # # # # # # # # # # # for d in dists:
# # # # # # # # # # # # # # # # # #     if d == INF:
# # # # # # # # # # # # # # # # # #         print ('INF')
# # # # # # # # # # # # # # # # # #     else:
# # # # # # # # # # # # # # # # # #         print (d)

# # # # # # # # # # # # # # # # # import heapq

# # # # # # # # # # # # # # # # # INF = 10**10
# # # # # # # # # # # # # # # # # N,M = map(int, input().split())

# # # # # # # # # # # # # # # # # def check(connected,n,start,end):
# # # # # # # # # # # # # # # # #   dp = [INF]*(N+1)
# # # # # # # # # # # # # # # # #   visited = [False]*(N+1)
# # # # # # # # # # # # # # # # #   dp[start] = 0
# # # # # # # # # # # # # # # # #   hq = [(0,start)]
# # # # # # # # # # # # # # # # #   while hq:
# # # # # # # # # # # # # # # # #     tmp,s = heapq.heappop(hq)
# # # # # # # # # # # # # # # # #     if visited[s]:
# # # # # # # # # # # # # # # # #       continue
# # # # # # # # # # # # # # # # #     visited[s] = True
# # # # # # # # # # # # # # # # #     for cost,e in connected[s]:
# # # # # # # # # # # # # # # # #       if dp[e] > dp[s]+cost:
# # # # # # # # # # # # # # # # #         dp[e] = dp[s]+cost
# # # # # # # # # # # # # # # # #         heapq.heappush(hq, (dp[e],e))
# # # # # # # # # # # # # # # # #   return dp[end]

# # # # # # # # # # # # # # # # # connected = [[] for _ in range(N+1)]
# # # # # # # # # # # # # # # # # ans = []
# # # # # # # # # # # # # # # # # for _ in range(M):
# # # # # # # # # # # # # # # # #   ins = list(map(int, input().split()))
# # # # # # # # # # # # # # # # #   if ins[0] == 1:
# # # # # # # # # # # # # # # # #     connected[ins[1]].append((ins[3],ins[2]))
# # # # # # # # # # # # # # # # #     connected[ins[2]].append((ins[3],ins[1]))
# # # # # # # # # # # # # # # # #   else:
# # # # # # # # # # # # # # # # #     ans.append(check(connected,N,ins[1],ins[2]))
# # # # # # # # # # # # # # # # # for a in ans:
# # # # # # # # # # # # # # # # #   if a == INF:
# # # # # # # # # # # # # # # # #     print(-1)
# # # # # # # # # # # # # # # # #   else:
# # # # # # # # # # # # # # # # #     print(a)

# # # # # # # # # # # # # # # # import heapq

# # # # # # # # # # # # # # # # INF = 10**10
# # # # # # # # # # # # # # # # N,M,K,S = map(int, input().split())
# # # # # # # # # # # # # # # # P,Q = map(int, input().split())
# # # # # # # # # # # # # # # # D = [int(input()) for _ in range(K)]
# # # # # # # # # # # # # # # # DC = []
# # # # # # # # # # # # # # # # connected = [[] for _ in range(N+1)]
# # # # # # # # # # # # # # # # for i in range(M):
# # # # # # # # # # # # # # # #   a,b = map(int, input().split())
# # # # # # # # # # # # # # # #   if a in D:
# # # # # # # # # # # # # # # #     DC.append(b)
# # # # # # # # # # # # # # # #   if b in D:
# # # # # # # # # # # # # # # #     DC.append(a)
# # # # # # # # # # # # # # # #   connected[a].append(b)
# # # # # # # # # # # # # # # #   connected[b].append(a)
# # # # # # # # # # # # # # # # DC = set(DC)
# # # # # # # # # # # # # # # # dp = [INF]*(N+1)
# # # # # # # # # # # # # # # # visited = [False]*(N+1)
# # # # # # # # # # # # # # # # dp[1] = 0
# # # # # # # # # # # # # # # # hq = [(0,1)]
# # # # # # # # # # # # # # # # while hq:
# # # # # # # # # # # # # # # #   tmp,s = heapq.heappop(hq)
# # # # # # # # # # # # # # # #   if visited[s]:
# # # # # # # # # # # # # # # #     continue
# # # # # # # # # # # # # # # #   visited[s] = True
# # # # # # # # # # # # # # # #   for e in connected[s]:
# # # # # # # # # # # # # # # #     if e in D:
# # # # # # # # # # # # # # # #       continue
# # # # # # # # # # # # # # # #     if e in DC:
# # # # # # # # # # # # # # # #       if dp[e] > dp[s] + Q:
# # # # # # # # # # # # # # # #         dp[e] = dp[s] + Q
# # # # # # # # # # # # # # # #         heapq.heappush(hq, (dp[e],e))
# # # # # # # # # # # # # # # #     else:
# # # # # # # # # # # # # # # #       if dp[e] > dp[s] + P:
# # # # # # # # # # # # # # # #         dp[e] = dp[s] + P
# # # # # # # # # # # # # # # #         heapq.heappush(hq, (dp[e],e))
# # # # # # # # # # # # # # # # print(dp)
# # # # # # # # # # # # # # # # if N in DC:
# # # # # # # # # # # # # # # #   print(dp[N]-Q)
# # # # # # # # # # # # # # # # else:
# # # # # # # # # # # # # # # #   print(dp[N]-P)


# # # # # # # # # # # # # # # from collections import deque
# # # # # # # # # # # # # # # import heapq
# # # # # # # # # # # # # # # #--------------------------------------[初期値]--------------------------------------#
# # # # # # # # # # # # # # # INF = float('inf')
# # # # # # # # # # # # # # # N, M, K, S = map(int, input().split()) # N個の町、M本の道路、K個がゾンビに支配、ゾンビからS本以内は危険な町
# # # # # # # # # # # # # # # P, Q = map(int, input().split()) # 危険じゃない場合はP円、危険な場合はQ円
# # # # # # # # # # # # # # # zombie_towns = [int(input()) for _ in range(K)]

# # # # # # # # # # # # # # # graph = [[] for _ in range(N+1)]
# # # # # # # # # # # # # # # for _ in range(M):
# # # # # # # # # # # # # # #     townA, townB = map(int, input().split())
# # # # # # # # # # # # # # #     graph[townA].append((INF, townB))
# # # # # # # # # # # # # # #     graph[townB].append((INF, townA))

# # # # # # # # # # # # # # # #--------------------------------------[BFSでゾンビ町からの距離を探索]--------------------------------------#
# # # # # # # # # # # # # # # # zombie_townsからS本以内の危険な町を探すためのBFS
# # # # # # # # # # # # # # # visited = [INF] * (N+1)
# # # # # # # # # # # # # # # q = deque()
# # # # # # # # # # # # # # # for zombie_town in zombie_towns:
# # # # # # # # # # # # # # #     q.append(zombie_town)
# # # # # # # # # # # # # # #     visited[zombie_town] = 0

# # # # # # # # # # # # # # # while q:
# # # # # # # # # # # # # # #     start_town = q.popleft()

# # # # # # # # # # # # # # #     for target in graph[start_town]:
# # # # # # # # # # # # # # #         _, end_town = target

# # # # # # # # # # # # # # #         if visited[end_town] != INF:
# # # # # # # # # # # # # # #             continue
# # # # # # # # # # # # # # #         q.append(end_town)
# # # # # # # # # # # # # # #         visited[end_town] = visited[start_town] + 1

# # # # # # # # # # # # # # # # zombie_townsからS本以内の危険な町についてsetとして記録しておく
# # # # # # # # # # # # # # # cost_Q = set()
# # # # # # # # # # # # # # # for i in range(1, N+1):
# # # # # # # # # # # # # # #     if visited[i] <= S:
# # # # # # # # # # # # # # #         cost_Q.add(i)

# # # # # # # # # # # # # # # #--------------------------------------[heapqで最短距離を探索]]--------------------------------------#
# # # # # # # # # # # # # # # # heapをまわす
# # # # # # # # # # # # # # # dp = [INF] * (N+1)
# # # # # # # # # # # # # # # visited2 = [-1] * (N+1)
# # # # # # # # # # # # # # # dp[1] = 0
# # # # # # # # # # # # # # # h = [(0, 1)]
# # # # # # # # # # # # # # # answer = 0
# # # # # # # # # # # # # # # while h:
# # # # # # # # # # # # # # #     cost, s = heapq.heappop(h) # sはstart, eはend
# # # # # # # # # # # # # # #     if visited2[s] == 1:
# # # # # # # # # # # # # # #         continue
# # # # # # # # # # # # # # #     if s in zombie_towns: # ゾンビがいる町は行かない
# # # # # # # # # # # # # # #         continue
# # # # # # # # # # # # # # #     visited2[s] = 1
# # # # # # # # # # # # # # #     targets = graph[s]

# # # # # # # # # # # # # # #     for target in targets:
# # # # # # # # # # # # # # #         _, e = target

# # # # # # # # # # # # # # #         if e in cost_Q: #  zombie_townsからS本以内の危険な町はQ, それ以外はP
# # # # # # # # # # # # # # #             cost = Q
# # # # # # # # # # # # # # #         else:
# # # # # # # # # # # # # # #             cost = P

# # # # # # # # # # # # # # #         if dp[e] > dp[s] + cost:
# # # # # # # # # # # # # # #             dp[e] = dp[s] + cost
# # # # # # # # # # # # # # #             heapq.heappush(h, (dp[e], e))
# # # # # # # # # # # # # # #         if e == N: # 目的地がでてきたらそこでbreak
# # # # # # # # # # # # # # #             answer = dp[s] # 答えは目的地の一つ前で記録したコスト
# # # # # # # # # # # # # # #             break
# # # # # # # # # # # # # # #     if answer != 0:
# # # # # # # # # # # # # # #         break

# # # # # # # # # # # # # # # print(answer)

# # # # # # # # # # # # # # # N = int(input())
# # # # # # # # # # # # # # # S = input()
# # # # # # # # # # # # # # # T = input()
# # # # # # # # # # # # # # # for i in range(N):
# # # # # # # # # # # # # # #   if S[i] != T[i]:
# # # # # # # # # # # # # # #     if S[i] == '1' and T[i] == 'l':
# # # # # # # # # # # # # # #       continue
# # # # # # # # # # # # # # #     elif S[i] == 'l' and T[i] == '1':
# # # # # # # # # # # # # # #       continue
# # # # # # # # # # # # # # #     elif S[i] == '0' and T[i] == 'o':
# # # # # # # # # # # # # # #       continue
# # # # # # # # # # # # # # #     elif S[i] == 'o' and T[i] == '0':
# # # # # # # # # # # # # # #       continue
# # # # # # # # # # # # # # #     else:
# # # # # # # # # # # # # # #       print("No")
# # # # # # # # # # # # # # #       exit()
# # # # # # # # # # # # # # # print("Yes")

# # # # # # # # # # # # # # # N,M = map(int, input().split())
# # # # # # # # # # # # # # # nexts = [[] for _ in range(N+1)]
# # # # # # # # # # # # # # # for i in range(M):
# # # # # # # # # # # # # # #   A = list(map(int, input().split()))
# # # # # # # # # # # # # # #   for j in range(N-1):
# # # # # # # # # # # # # # #     nexts[A[j]].append(A[j+1])
# # # # # # # # # # # # # # #     nexts[A[j+1]].append(A[j])
# # # # # # # # # # # # # # # cnt = 0
# # # # # # # # # # # # # # # for i in range(1,N+1):
# # # # # # # # # # # # # # #   cnt += (N-(len(set(nexts[i]))+1))
# # # # # # # # # # # # # # # print(cnt//2)

# # # # # # # # # # # # # # from collections import deque

# # # # # # # # # # # # # # N,M,H,K = map(int, input().split())
# # # # # # # # # # # # # # S = input()
# # # # # # # # # # # # # # Items = set([tuple(map(int, input().split())) for _ in range(M)])
# # # # # # # # # # # # # # cnt = 0
# # # # # # # # # # # # # # q = deque()
# # # # # # # # # # # # # # q.append((0,0))
# # # # # # # # # # # # # # while q:
# # # # # # # # # # # # # #   x,y = q.popleft()
# # # # # # # # # # # # # #   if S[cnt] == 'R':
# # # # # # # # # # # # # #     H -= 1
# # # # # # # # # # # # # #     if H < K and (x+1,y) in Items:
# # # # # # # # # # # # # #       Items.remove((x+1,y))
# # # # # # # # # # # # # #       H = K
# # # # # # # # # # # # # #       cnt += 1
# # # # # # # # # # # # # #       q.append((x+1,y))
# # # # # # # # # # # # # #     else:
# # # # # # # # # # # # # #       cnt += 1
# # # # # # # # # # # # # #       q.append((x+1,y))
# # # # # # # # # # # # # #   elif S[cnt] == 'L':
# # # # # # # # # # # # # #     H -= 1
# # # # # # # # # # # # # #     if H < K and (x-1,y) in Items:
# # # # # # # # # # # # # #       Items.remove((x-1,y))
# # # # # # # # # # # # # #       H = K
# # # # # # # # # # # # # #       cnt += 1
# # # # # # # # # # # # # #       q.append((x-1,y))
# # # # # # # # # # # # # #     else:
# # # # # # # # # # # # # #       cnt += 1
# # # # # # # # # # # # # #       q.append((x-1,y))
# # # # # # # # # # # # # #   elif S[cnt] == 'U':
# # # # # # # # # # # # # #     H -= 1
# # # # # # # # # # # # # #     if H < K and (x,y+1) in Items:
# # # # # # # # # # # # # #       Items.remove((x,y+1))
# # # # # # # # # # # # # #       H = K
# # # # # # # # # # # # # #       cnt += 1
# # # # # # # # # # # # # #       q.append((x,y+1))
# # # # # # # # # # # # # #     else:
# # # # # # # # # # # # # #       cnt += 1
# # # # # # # # # # # # # #       q.append((x,y+1))
# # # # # # # # # # # # # #   elif S[cnt] == 'D':
# # # # # # # # # # # # # #     H -= 1
# # # # # # # # # # # # # #     if H < K and (x,y-1) in Items:
# # # # # # # # # # # # # #       Items.remove((x,y-1))
# # # # # # # # # # # # # #       H = K
# # # # # # # # # # # # # #       cnt += 1
# # # # # # # # # # # # # #       q.append((x,y-1))
# # # # # # # # # # # # # #     else:
# # # # # # # # # # # # # #       cnt += 1
# # # # # # # # # # # # # #       q.append((x,y-1))
# # # # # # # # # # # # # #   if cnt == N:
# # # # # # # # # # # # # #     print("Yes")
# # # # # # # # # # # # # #     exit()
# # # # # # # # # # # # # #   if H < 1:
# # # # # # # # # # # # # #     print("No")
# # # # # # # # # # # # # #     exit()

# # # # # # # # # # # # # X,Y,Z = map(int, input().split())
# # # # # # # # # # # # # S = input()
# # # # # # # # # # # # # judge = False
# # # # # # # # # # # # # ans = 0
# # # # # # # # # # # # # cnt = 0
# # # # # # # # # # # # # for i in range(len(S)-1):
# # # # # # # # # # # # #   cnt += 1
# # # # # # # # # # # # #   if S[i] != S[i+1]:
# # # # # # # # # # # # #     if S[i] == 'a':
# # # # # # # # # # # # #       if judge:
# # # # # # # # # # # # #         if (Z+X*cnt) < (Y*cnt):
# # # # # # # # # # # # #           ans += (Z+X*cnt)
# # # # # # # # # # # # #           judge = False
# # # # # # # # # # # # #         else:
# # # # # # # # # # # # #           ans += (Y*cnt)
# # # # # # # # # # # # #       else:
# # # # # # # # # # # # #         if (X*cnt) > (Z+Y*cnt):
# # # # # # # # # # # # #           ans += (Z+Y*cnt)
# # # # # # # # # # # # #           judge = True
# # # # # # # # # # # # #         else:
# # # # # # # # # # # # #           ans += (X*cnt)
# # # # # # # # # # # # #       cnt = 0
# # # # # # # # # # # # #     else:
# # # # # # # # # # # # #       if judge:
# # # # # # # # # # # # #         if (X*cnt) > (Z+Y*cnt):
# # # # # # # # # # # # #           ans += (Z+Y*cnt)
# # # # # # # # # # # # #           judge = True
# # # # # # # # # # # # #         else:
# # # # # # # # # # # # #           ans += (X*cnt)
# # # # # # # # # # # # #       else:
# # # # # # # # # # # # #         if (Z+X*cnt) < (Y*cnt):
# # # # # # # # # # # # #           ans += (Z+X*cnt)
# # # # # # # # # # # # #           judge = False
# # # # # # # # # # # # #         else:
# # # # # # # # # # # # #           ans += (Y*cnt)
# # # # # # # # # # # # #       cnt = 0
# # # # # # # # # # # # # cnt += 1
# # # # # # # # # # # # # if S[-1] == 'a':
# # # # # # # # # # # # #   if judge:
# # # # # # # # # # # # #     ans += min((Z+X*cnt), Y*cnt)
# # # # # # # # # # # # #   else:
# # # # # # # # # # # # #     ans += min((X*cnt), (Z+Y*cnt))
# # # # # # # # # # # # # else:
# # # # # # # # # # # # #   if judge:
# # # # # # # # # # # # #     ans += min((X*cnt),(Z+Y*cnt))
# # # # # # # # # # # # #   else:
# # # # # # # # # # # # #     ans += min((Z+X*cnt),(Y*cnt))
# # # # # # # # # # # # # print(ans)

# # # # # # # # # # # # # # 入力
# # # # # # # # # # # # # X, Y, Z = map(int, input().split())
# # # # # # # # # # # # # S = input()
# # # # # # # # # # # # # # DP[i, j]
# # # # # # # # # # # # # # i:CapsLockキーのランプOFFの時の最短時間
# # # # # # # # # # # # # # j:CapsLockキーのランプONの時の最短時間
# # # # # # # # # # # # # dp = [[0, Z] for _ in range(len(S)+1)]
# # # # # # # # # # # # # # 全ての文字列について
# # # # # # # # # # # # # for i in range(len(S)):
# # # # # # # # # # # # #     # 詳しくは下で解説
# # # # # # # # # # # # #     if S[i] == "a":
# # # # # # # # # # # # #         dp[i+1][0] = min(dp[i][0]+X, dp[i][1]+Z+X)
# # # # # # # # # # # # #         dp[i+1][1] = min(dp[i][0]+Z+Y, dp[i][1]+Y)
# # # # # # # # # # # # #     else:
# # # # # # # # # # # # #         dp[i+1][0] = min(dp[i][0]+Y, dp[i][1]+Z+Y)
# # # # # # # # # # # # #         dp[i+1][1] = min(dp[i][0]+Z+X, dp[i][1]+X)
# # # # # # # # # # # # # # 最短時間を出力
# # # # # # # # # # # # # print(dp)
# # # # # # # # # # # # # print(min(dp[-1]))

# # # # # # # # # # # # # import heapq
# # # # # # # # # # # # # from collections import deque

# # # # # # # # # # # # # INF = 10**10
# # # # # # # # # # # # # N,K = map(int, input().split())
# # # # # # # # # # # # # T = [tuple(map(int, input().split())) for _ in range(N)]
# # # # # # # # # # # # # connected = [[] for _ in range(N+1)]
# # # # # # # # # # # # # for i in range(K):
# # # # # # # # # # # # #   a,b = map(int, input().split())
# # # # # # # # # # # # #   connected[a].append(b)
# # # # # # # # # # # # #   connected[b].append(a)
# # # # # # # # # # # # # dp = [INF]*(N+1)
# # # # # # # # # # # # # dp[1] = 0
# # # # # # # # # # # # # D = [[-1]*(N+1) for _ in range(N+1)]
# # # # # # # # # # # # # for i in range(1,N+1):
# # # # # # # # # # # # #   D[i][i] = 0
# # # # # # # # # # # # # for i in range(1,N+1):
# # # # # # # # # # # # #   q = deque()
# # # # # # # # # # # # #   q.append(i)
# # # # # # # # # # # # #   visited = [False]*(N+1)
# # # # # # # # # # # # #   visited[i] = True
# # # # # # # # # # # # #   while q:
# # # # # # # # # # # # #     now = q.popleft()
# # # # # # # # # # # # #     for c in connected[now]:
# # # # # # # # # # # # #       if not visited[c]:
# # # # # # # # # # # # #         visited[c] = True
# # # # # # # # # # # # #         D[i][c] = D[i][now]+1
# # # # # # # # # # # # #         q.append(c)
# # # # # # # # # # # # # hq = [()]


# # # # # # # # # # # # from collections import deque
# # # # # # # # # # # # import heapq

# # # # # # # # # # # # #------------------[BFSで各点からそれぞれの目的地までの距離を求める]----------------------#
# # # # # # # # # # # # def bfs(start, graph):

# # # # # # # # # # # #     visited = [-1] * N
# # # # # # # # # # # #     q = deque()
# # # # # # # # # # # #     q.append(start)
# # # # # # # # # # # #     visited[start] = 0

# # # # # # # # # # # #     while q:
# # # # # # # # # # # #         s = q.popleft()
# # # # # # # # # # # #         targets = graph[s]
# # # # # # # # # # # #         for e in targets:

# # # # # # # # # # # #             if visited[e] != -1:
# # # # # # # # # # # #                 continue
# # # # # # # # # # # #             visited[e] = visited[s] + 1
# # # # # # # # # # # #             q.append(e)

# # # # # # # # # # # #     return visited


# # # # # # # # # # # # if __name__ == "__main__":
# # # # # # # # # # # #     #------------------[入力]----------------------#
# # # # # # # # # # # #     INF = float('inf')

# # # # # # # # # # # #     N, K = map(int, input().split()) # N個の町、K本の道路
# # # # # # # # # # # #     costs = [INF] * N
# # # # # # # # # # # #     counts = [0] * N
# # # # # # # # # # # #     for i in range(N):
# # # # # # # # # # # #         C, R = map(int, input().split())
# # # # # # # # # # # #         costs[i] = C
# # # # # # # # # # # #         counts[i] = R

# # # # # # # # # # # #     graph = [[] for _ in range(N)]
# # # # # # # # # # # #     for _ in range(K):
# # # # # # # # # # # #         A, B = map(int, input().split())
# # # # # # # # # # # #         A -= 1
# # # # # # # # # # # #         B -= 1
# # # # # # # # # # # #         graph[A].append(B)
# # # # # # # # # # # #         graph[B].append(A)
# # # # # # # # # # # #     print(graph)
# # # # # # # # # # # #     #------------------[graphの再構築]]----------------------#
# # # # # # # # # # # #     graph2 = [[] for _ in range(N)]
# # # # # # # # # # # #     for start in range(N):
# # # # # # # # # # # #         end_list = bfs(start, graph)

# # # # # # # # # # # #         for end, count in enumerate(end_list):
# # # # # # # # # # # #             if counts[start] < count: 
# # # # # # # # # # # #                 continue
# # # # # # # # # # # #             if start == end:
# # # # # # # # # # # #                 continue
# # # # # # # # # # # #             graph2[start].append((costs[start], end)) #回数制限内にいける箇所のみgraphに追加
# # # # # # # # # # # #     print(graph2)
# # # # # # # # # # # #     #------------------[heapqで最短距離]]----------------------#
# # # # # # # # # # # #     dp = [INF] * N
# # # # # # # # # # # #     visited = [-1] * N
# # # # # # # # # # # #     dp[0] = 0
# # # # # # # # # # # #     h = [(0, 0)]
# # # # # # # # # # # #     while h:
# # # # # # # # # # # #         _, s = heapq.heappop(h)
# # # # # # # # # # # #         if visited[s] == 1:
# # # # # # # # # # # #             continue
# # # # # # # # # # # #         visited[s] = 1
# # # # # # # # # # # #         targets = graph2[s]

# # # # # # # # # # # #         for target in targets:
# # # # # # # # # # # #             cost, e = target
# # # # # # # # # # # #             if dp[e] > dp[s] + cost:
# # # # # # # # # # # #                 dp[e] = dp[s] + cost
# # # # # # # # # # # #                 heapq.heappush(h, (dp[e], e))

# # # # # # # # # # # #     print(dp[N-1])

# # # # # # # # # # # INF = 10**18
# # # # # # # # # # # V,E = map(int, input().split())
# # # # # # # # # # # connected = [[] for _ in range(V)]
# # # # # # # # # # # dp = [[INF]*(V) for _ in range(V)]
# # # # # # # # # # # for i in range(V):
# # # # # # # # # # #   dp[i][i] = 0
# # # # # # # # # # # for i in range(E):
# # # # # # # # # # #   s,t,d = map(int, input().split())
# # # # # # # # # # #   connected[s].append(t)
# # # # # # # # # # #   dp[s][t] = d
# # # # # # # # # # # for k in range(V):
# # # # # # # # # # #   for i in range(V):
# # # # # # # # # # #     for j in range(V):
# # # # # # # # # # #       if dp[i][k] != INF and dp[k][j] != INF:
# # # # # # # # # # #         dp[i][j] = min(dp[i][j], dp[i][k]+dp[k][j])
# # # # # # # # # # # for dl in dp:
# # # # # # # # # # #   for d in dl:
# # # # # # # # # # #     if d == INF:
# # # # # # # # # # #       print('INF', end=" ")
# # # # # # # # # # #     else:
# # # # # # # # # # #       print(d, end=" ")
# # # # # # # # # # #   print()

# # # # # # # # # # # INF = 10**18
# # # # # # # # # # # N,M = map(int, input().split())
# # # # # # # # # # # dp = [[INF]*(N) for _ in range(N)]
# # # # # # # # # # # for i in range(N):
# # # # # # # # # # #   dp[i][i] = 0
# # # # # # # # # # # for i in range(M):
# # # # # # # # # # #   a,b,t = map(int, input().split())
# # # # # # # # # # #   a -= 1
# # # # # # # # # # #   b -= 1
# # # # # # # # # # #   dp[a][b] = t
# # # # # # # # # # #   dp[b][a] = t
# # # # # # # # # # # for k in range(N):
# # # # # # # # # # #   for i in range(N):
# # # # # # # # # # #     for j in range(N):
# # # # # # # # # # #       if dp[i][k] != INF and dp[k][j] != INF:
# # # # # # # # # # #         dp[i][j] = min(dp[i][j], dp[i][k]+dp[k][j])
# # # # # # # # # # # ans = []
# # # # # # # # # # # for d in dp:
# # # # # # # # # # #   ans.append(max(d))
# # # # # # # # # # # print(min(ans))

# # # # # # # # # # # H,W = map(int, input().split())
# # # # # # # # # # # C = [list(map(int, input().split())) for _ in range(10)]
# # # # # # # # # # # A = [list(map(int, input().split())) for _ in range(H)]
# # # # # # # # # # # for k in range(10):
# # # # # # # # # # #   for i in range(10):
# # # # # # # # # # #     for j in range(10):
# # # # # # # # # # #       if C[i][k] != 9 and C[k][j] != 9:
# # # # # # # # # # #         C[i][j] = min(C[i][j],C[i][k]+C[k][j])
# # # # # # # # # # # ans = 0
# # # # # # # # # # # for a_line in A:
# # # # # # # # # # #   for a in a_line:
# # # # # # # # # # #     if a != -1 and a != 1:
# # # # # # # # # # #       ans += C[a][1]
# # # # # # # # # # # print(ans)

# # # # # # # # # # N = int(input())
# # # # # # # # # # INF = 10**10
# # # # # # # # # # cost = [[INF]*N for _ in range(N)] # INFで初期化v

# # # # # # # # # # for u in range(N):
# # # # # # # # # #     C = list(map(int, input().split()))
# # # # # # # # # #     for v in range(N):
# # # # # # # # # #         if u==v: # 自身への道路はINFのままにする
# # # # # # # # # #             continue
# # # # # # # # # #         cost[u][v] = C[v]
# # # # # # # # # # ans = 0
# # # # # # # # # # for u in range(N):
# # # # # # # # # #     for v in range(u+1,N): # u < v
# # # # # # # # # #         mn = INF # u-w-vのような経路の中で最小の距離を求める
# # # # # # # # # #         for w in range(N):
# # # # # # # # # #             mn = min(mn, cost[u][w]+cost[w][v])    
# # # # # # # # # #         if (cost[u][v] > mn): # 与えられた行列が最短経路ではない
# # # # # # # # # #             print (-1) # 終了して良い
# # # # # # # # # #             exit()
# # # # # # # # # #         elif (cost[u][v] < mn): # 等しくない場合はu-vを直接結ぶ道路が必要 
# # # # # # # # # #             # print(cost[u][v], mn)
# # # # # # # # # #             ans += cost[u][v]     
# # # # # # # # # # print (ans)

# # # # # # # # # # import heapq

# # # # # # # # # # V,E = map(int, input().split())
# # # # # # # # # # connected = [[] for _ in range(V)]
# # # # # # # # # # for i in range(E):
# # # # # # # # # #   s,t,w = map(int, input().split())
# # # # # # # # # #   connected[s].append((w,t))
# # # # # # # # # #   connected[t].append((w,s))
# # # # # # # # # # visited = [False]*(V)
# # # # # # # # # # vc = 0
# # # # # # # # # # visited[0] = True
# # # # # # # # # # vc += 1
# # # # # # # # # # hq = []
# # # # # # # # # # for w,t in connected[0]:
# # # # # # # # # #   heapq.heappush(hq, (w,t))
# # # # # # # # # # ans = 0
# # # # # # # # # # while vc < V:
# # # # # # # # # #   w,i = heapq.heappop(hq)
# # # # # # # # # #   if visited[i]:
# # # # # # # # # #     continue
# # # # # # # # # #   visited[i] = True
# # # # # # # # # #   vc += 1
# # # # # # # # # #   ans += w
# # # # # # # # # #   for w,t in connected[i]:
# # # # # # # # # #     if visited[t]:
# # # # # # # # # #       continue
# # # # # # # # # #     heapq.heappush(hq, (w,t))
# # # # # # # # # # print(ans)

# # # # # # # # # # import heapq

# # # # # # # # # # INF = 10**18
# # # # # # # # # # N,M,K = map(int, input().split())
# # # # # # # # # # connected = [[] for _ in range(N+1)]
# # # # # # # # # # for i in range(M):
# # # # # # # # # #   s,t,d = map(int, input().split())
# # # # # # # # # #   connected[s].append((d,t))
# # # # # # # # # #   connected[t].append((d,s))
# # # # # # # # # # dp = [[INF]*(N+1) for _ in range(N+1)]
# # # # # # # # # # for i in range(1,N+1):
# # # # # # # # # #   visited = [False]*(N+1)
# # # # # # # # # #   visited[i] = True
# # # # # # # # # #   dp[i] = 0
# # # # # # # # # #   hq = []
# # # # # # # # # #   for d,t in connected[i]:
# # # # # # # # # #     heapq.heappush(hq, (d,t))
# # # # # # # # # #   while hq:
# # # # # # # # # #     d,to = heapq.heappop(hq)
# # # # # # # # # #     if visited[to]:
# # # # # # # # # #       continue

# # # # # # # # # # finals - 本選会場


# # # # # # # # # import heapq


# # # # # # # # # def prim(st):
# # # # # # # # #     used = [False]*N
# # # # # # # # #     hq = []
# # # # # # # # #     for i in road[st]:
# # # # # # # # #         heapq.heappush(hq,i)
# # # # # # # # #     global ans
# # # # # # # # #     costs = []
# # # # # # # # #     used[st] = True
# # # # # # # # #     while hq:
# # # # # # # # #         ct,to = heapq.heappop(hq)
# # # # # # # # #         if used[to] == True:
# # # # # # # # #             continue
# # # # # # # # #         used[to] = True
# # # # # # # # #         ans += ct
# # # # # # # # #         costs.append(ct)
# # # # # # # # #         for cost_nxt,nxt in road[to]:
# # # # # # # # #             if used[nxt] == True:
# # # # # # # # #                 continue 
# # # # # # # # #             heapq.heappush(hq,(cost_nxt,nxt))
    
# # # # # # # # #     return costs


# # # # # # # # # N,M,K = map(int, input().split())

# # # # # # # # # road = [[] for _ in range(N)]

# # # # # # # # # for i in range(M):
# # # # # # # # #     a,b,c = map(int, input().split())
# # # # # # # # #     road[a-1].append((c,b-1))
# # # # # # # # #     road[b-1].append((c,a-1))

# # # # # # # # # ans = 0
# # # # # # # # # costs = prim(0)
# # # # # # # # # print(costs,ans)
# # # # # # # # # costs.sort(reverse=True)
# # # # # # # # # for i in range(K-1):
# # # # # # # # #     ans -= costs[i]

# # # # # # # # # print(ans)

# # # # # # # # # from collections import deque
# # # # # # # # # import math
# # # # # # # # # N,D = map(int, input().split())
# # # # # # # # # inR = [[] for _ in range(N)]
# # # # # # # # # P = [list(map(int, input().split())) for _ in range(N)]
# # # # # # # # # for i in range(N):
# # # # # # # # #   for j in range(i+1,N):
# # # # # # # # #     dis = math.sqrt((P[i][0]-P[j][0])**2+(P[i][1]-P[j][1])**2)
# # # # # # # # #     if dis <= D:
# # # # # # # # #       inR[i].append(j)
# # # # # # # # #       inR[j].append(i)
# # # # # # # # # inF = [False]*N
# # # # # # # # # q = deque()
# # # # # # # # # q.append(0)
# # # # # # # # # while q:
# # # # # # # # #   now = q.popleft()
# # # # # # # # #   if inF[now]:
# # # # # # # # #     continue
# # # # # # # # #   inF[now] = True
# # # # # # # # #   for r in inR[now]:
# # # # # # # # #     q.append(r)
# # # # # # # # # for i in inF:
# # # # # # # # #   if i:
# # # # # # # # #     print("Yes")
# # # # # # # # #   else:
# # # # # # # # #     print("No")

# # # # # # # # # N = int(input())
# # # # # # # # # if abs(N-(N//5+1)*5) < abs(N-(N//5)*5):
# # # # # # # # #   print((N//5+1)*5)
# # # # # # # # # else:
# # # # # # # # #   print((N//5)*5)

# # # # # # # # # p,q = input().split()
# # # # # # # # # L = ['A','B','C','D','E','F','G']
# # # # # # # # # D = [3,1,4,1,5,9]
# # # # # # # # # print(sum(D[min(L.index(p),L.index(q)):max(L.index(p),L.index(q))]))

# # # # # # # # # H,W = map(int, input().split())
# # # # # # # # # S = [input() for _ in range(H)]
# # # # # # # # # num = 0
# # # # # # # # # y = 0
# # # # # # # # # x = 0
# # # # # # # # # for i in range(W):
# # # # # # # # #   if num != S[i].count("#") and num != 0:
# # # # # # # # #     if S[i].count("#") > S[i-1].count("#"):
# # # # # # # # #       y = i
# # # # # # # # #       break
# # # # # # # # #     else:
# # # # # # # # #       y = i+1
# # # # # # # # #       break
# # # # # # # # #   else:
# # # # # # # # #     num = S[i].count("#")
# # # # # # # # # for i in range(H-1):
# # # # # # # # #   if (S[y-1][i] == "#") and (S[y-1][i+1] == "."):
# # # # # # # # #     x = i+2
# # # # # # # # #     break
# # # # # # # # # print(y,x)

# # # # # # # # import bisect
# # # # # # # # N = int(input())
# # # # # # # # A = list(map(int, input().split()))
# # # # # # # # Q = int(input())
# # # # # # # # tmp = []
# # # # # # # # for i in range(Q):
# # # # # # # #   l,r = map(int, input().split())
# # # # # # # #   cnt = 0
# # # # # # # #   li = bisect.bisect_left(A,l)
# # # # # # # #   ri = bisect.bisect_left(A,r)
# # # # # # # #   if li % 2 == 0:
# # # # # # # #     cnt += (A[li]-l)
# # # # # # # #   if ri % 2 == 0:
# # # # # # # #     cnt += (r-A[ri-1])
# # # # # # # #   for j in range(li+1,ri):
# # # # # # # #     if j % 2 == 0:
# # # # # # # #       cnt += A[j]-A[j-1]
# # # # # # # #   tmp.append(cnt)
# # # # # # # # for t in tmp:
# # # # # # # #   print(t)

# # # # # # # from itertools import accumulate
# # # # # # # from bisect import bisect
# # # # # # # def f(x):
# # # # # # #     i = bisect(A,x)-1
# # # # # # #     res = cumsum[i]
# # # # # # #     if i%2 == 1:
# # # # # # #         res += x-A[i]
# # # # # # #     return res

# # # # # # # N = int(input())
# # # # # # # A = list(map(int,input().split()))
# # # # # # # cumsum = [0] + list(accumulate((A[i+1]-A[i] if i%2 else 0 for i in range(N-1))))
# # # # # # # print(cumsum)
# # # # # # # Q = int(input())
# # # # # # # tmp = []
# # # # # # # for _ in range(Q):
# # # # # # #     l,r = map(int,input().split())
# # # # # # #     tmp.append((f(r),f(l)))
# # # # # # # print(tmp)

# # # # # # # import math
# # # # # # # from collections import Counter

# # # # # # # def prime_factorization(n):
# # # # # # #     counter = Counter()
    
# # # # # # #     for p in range(2, int(N ** 0.5) + 1):
# # # # # # #         while n % p == 0:
# # # # # # #             counter[p] += 1
# # # # # # #             n //= p
# # # # # # #     if n != 1:
# # # # # # #         counter[n] += 1
# # # # # # #     return counter

# # # # # # # N = int(input())
# # # # # # # prime = prime_factorization(N)
# # # # # # # prime_li = []
# # # # # # # for k,v in prime.items():
# # # # # # #   for i in range(v):
# # # # # # #     prime_li.append(k)
# # # # # # # print(N, end=": ")
# # # # # # # print(*prime_li)

# # # # # # # def eratosthenes(n):
# # # # # # #     # n までの自然数を列挙する
# # # # # # #     isPrimes = [True] * (n+1)

# # # # # # #     # 0 と 1 を取り除く
# # # # # # #     isPrimes[0], isPrimes[1] = False, False

# # # # # # #     # 2 から √n まで繰り返す
# # # # # # #     for i in range(2, int(n**0.5)+1):
# # # # # # #         # i が取り除かれていないとき
# # # # # # #         if isPrimes[i]:
# # # # # # #             # i の倍数を取り除く
# # # # # # #             for j in range(2*i, n+1, i):
# # # # # # #                 isPrimes[j] = False
# # # # # # #     return [i for i in range(2, n+1) if isPrimes[i]]

# # # # # # # Q = int(input())
# # # # # # # prime = set(eratosthenes(10**5))
# # # # # # # ans = []
# # # # # # # for i in range(Q):
# # # # # # #   l,r = map(int, input().split())
# # # # # # #   cnt = 0
# # # # # # #   for j in range(l,r+1,2):
# # # # # # #     if j in prime and ((j+1)//2) in prime:
# # # # # # #       cnt += 1
# # # # # # #   ans.append(cnt)
# # # # # # # for a in ans:
# # # # # # #   print(a)

# # # # # # # N = int(input())
# # # # # # # S = input()
# # # # # # # ans = ""
# # # # # # # for s in S:
# # # # # # #   ans += s*2
# # # # # # # print(ans)

# # # # # # # A = list(map(int, input().split()))
# # # # # # # ans = 0
# # # # # # # for i in range(64):
# # # # # # #   if A[i]:
# # # # # # #     ans += 2**i
# # # # # # # print(ans)

# # # # # # # N = int(input())
# # # # # # # idxs = [[] for _ in range(N)]
# # # # # # # A = list(map(int, input().split()))
# # # # # # # for i,a in enumerate(A):
# # # # # # #   idxs[a-1].append(i+1)
# # # # # # # dic = []
# # # # # # # for i in range(N):
# # # # # # #   dic.append((idxs[i][1], i+1))
# # # # # # # ans = []
# # # # # # # for a,b in sorted(dic):
# # # # # # #   ans.append(b)
# # # # # # # print(*ans)

# # # # # # # N = int(input())
# # # # # # # dp = [[0,0] for _ in range(N+1)]
# # # # # # # for i in range(1,N+1):
# # # # # # #   X,Y = map(int, input().split())
# # # # # # #   if X == 1:
# # # # # # #     dp[i][1] = max(dp[i-1][1],dp[i-1][0]+Y)
# # # # # # #     dp[i][0] = dp[i-1][0]
# # # # # # #   else:
# # # # # # #     dp[i][1] = dp[i-1][1]
# # # # # # #     dp[i][0] = max(dp[i-1][0],dp[i-1][0]+Y,dp[i-1][1]+Y)
# # # # # # # print(max(dp[-1]))

# # # # # # # from itertools import accumulate

# # # # # # # def primes(n):
# # # # # # #     is_prime = [1] * (n + 1)
# # # # # # #     is_prime[0] = 0
# # # # # # #     is_prime[1] = 0
# # # # # # #     for i in range(2, int(n**0.5) + 1):
# # # # # # #         if not is_prime[i]:
# # # # # # #             continue
# # # # # # #         for j in range(i * 2, n + 1, i):
# # # # # # #             is_prime[j] = 0
# # # # # # #     return {i for i in range(n + 1) if is_prime[i]}
  
# # # # # # # Limit = 10**5
# # # # # # # Q = int(input())
# # # # # # # Pr = primes(Limit)
# # # # # # # C = [0]*(Limit+1)
# # # # # # # for i in range(Limit+1):
# # # # # # #   if i % 2 and i in Pr and (i+1)//2 in Pr:
# # # # # # #     C[i] += 1
# # # # # # # li = list(accumulate(C))
# # # # # # # for i in range(Q):
# # # # # # #   l,r = map(int, input().split())
# # # # # # #   print(li[r]-li[l-1])

# # # # # # # MOD = 10**9+7
# # # # # # # m,n = map(int, input().split())
# # # # # # # 毎回MODの余りで計算される様になって高速化ができるshould better remember
# # # # # # # print(pow(m,n,MOD))

# # # # # # # MOD = 10**9+7
# # # # # # # from itertools import accumulate

# # # # # # # N,Q = map(int, input().split())
# # # # # # # A = list(map(int, input().split()))
# # # # # # # C = [1] + list(map(int, input().split()))
# # # # # # # D = [0]
# # # # # # # for i in range(N-1):
# # # # # # #   D.append(pow(A[i],A[i+1],MOD))
# # # # # # # D = list(accumulate(D))
# # # # # # # C.append(1)
# # # # # # # ans = 0
# # # # # # # for i in range(len(C)-1):
# # # # # # #   ans += abs(D[C[i+1]-1]-D[C[i]-1])
# # # # # # # print(ans%MOD)

# # # # # # # import math
# # # # # # # MOD = 10**9+7
# # # # # # # def com(n,r):
# # # # # # #   return math.factorial(n)//(math.factorial(n-r)*math.factorial(r))
# # # # # # # W,H = map(int, input().split())
# # # # # # # print(com(W+H-2,W-1)%MOD)

# # # # # # # from itertools import accumulate
# # # # # # # N = int(input())
# # # # # # # A = [0]+list(map(int, input().split()))
# # # # # # # Alis = list(accumulate(A))
# # # # # # # for i in range(1,N+1):
# # # # # # #   tmp = []
# # # # # # #   for j in range(N-i+1):
# # # # # # #     tmp.append(Alis[j+i]-Alis[j])
# # # # # # #   print(max(tmp))

# # # # # # # from itertools import accumulate

# # # # # # # MOD = 10**5
# # # # # # # N,M = map(int, input().split())
# # # # # # # D = [0] + [int(input()) for _ in range(N-1)]
# # # # # # # P = [int(input()) for _ in range(M)]
# # # # # # # Dlis = list(accumulate(D))
# # # # # # # now = 0
# # # # # # # ans = 0
# # # # # # # for p in P:
# # # # # # #   ans += abs(Dlis[now+p]-Dlis[now])
# # # # # # #   now += p
# # # # # # #   ans %= MOD
# # # # # # # print(ans)

# # # # # # # N = int(input())
# # # # # # # S = [input() for _ in range(N)]
# # # # # # # for i in range(N):
# # # # # # #   for j in range(i+1,N):
# # # # # # #     st = S[i]+S[j]
# # # # # # #     if st == st[::-1]:
# # # # # # #       print("Yes")
# # # # # # #       exit()
# # # # # # # print("No")

# # # # # # # N = int(input())
# # # # # # # S = input()
# # # # # # # st = []
# # # # # # # en = []
# # # # # # # for i,s in enumerate(S):
# # # # # # #   if s == '(':
# # # # # # #     st.append(i)
# # # # # # #   elif s == ')':
# # # # # # #     en.append(i)
# # # # # # # print(st,en)

# # # # # # # インポート
# # # # # # from collections import deque
# # # # # # # 入力N
# # # # # # N = int(input())
# # # # # # # 入力S
# # # # # # S = input()

# # # # # # # 答えとなるdeque
# # # # # # d = deque()
# # # # # # # "("が出てきた回数c
# # # # # # c = 0
# # # # # # # Sの全ての文字sについて
# # # # # # for s in S:
# # # # # #     # sを答えに追加
# # # # # #     d.append(s)
# # # # # #     # "("だったら、cに1加える
# # # # # #     if s == "(":
# # # # # #         c += 1
# # # # # #     # ")"で、以前に"("が存在したら、
# # # # # #     # "("になるまで削除する
# # # # # #     elif s == ")" and c > 0:
# # # # # #         ss = ""
# # # # # #         while ss != "(":
# # # # # #             ss = d.pop()
# # # # # #         # cから1引く
# # # # # #         c -= 1
# # # # # # print("".join(d))

# # # # # # from collections import deque
# # # # # # N = int(input())
# # # # # # S = input()
# # # # # # q = deque()
# # # # # # cnt = 0
# # # # # # for s in S:
# # # # # #   q.append(s)
# # # # # #   if s == '(':
# # # # # #     cnt += 1
# # # # # #   elif s == ')' and cnt > 0:
# # # # # #     ss = ''
# # # # # #     while ss != '(':
# # # # # #       ss = q.pop()
# # # # # #     cnt -= 1
# # # # # # print(''.join(q))

# # # # # # from itertools import accumulate

# # # # # # M,N = map(int, input().split())
# # # # # # K = int(input())
# # # # # # S = [list(input()) for _ in range(M)]
# # # # # # SJ = []
# # # # # # SO = []
# # # # # # SI = []
# # # # # # for s_line in S:
# # # # # #   j = [0]*(N+1)
# # # # # #   o = [0]*(N+1)
# # # # # #   i = [0]*(N+1)
# # # # # #   for num,s in enumerate(s_line):
# # # # # #     if s == 'J':
# # # # # #       j[num+1] += 1
# # # # # #     elif s == 'O':
# # # # # #       o[num+1] += 1
# # # # # #     else:
# # # # # #       i [num+1] += 1
# # # # # #   SJ.append(list(accumulate(j)))
# # # # # #   SO.append(list(accumulate(o)))
# # # # # #   SI.append(list(accumulate(i)))
# # # # # # ans = []
# # # # # # for i in range(K):
# # # # # #   y1,x1,y2,x2 = map(int, input().split())
# # # # # #   J = 0
# # # # # #   O = 0
# # # # # #   I = 0
# # # # # #   for j in range(y1-1,y2):
# # # # # #     J += (SJ[j][x2]-SJ[j][x1-1])
# # # # # #     O += (SO[j][x2]-SO[j][x1-1])
# # # # # #     I += (SI[j][x2]-SI[j][x1-1])
# # # # # #   print(J,O,I)

# # # # # # from itertools import accumulate
# # # # # # N, M, Q = map(int, input().split())
# # # # # # rails = [[0] * N for _ in range(N)]
# # # # # # for line in range(M):
# # # # # #     l, r = map(int, input().split())
# # # # # #     rails[l - 1][r - 1] += 1
# # # # # # rails = [list(accumulate(s)) for s in rails]
# # # # # # rails = [list(reversed(list(accumulate(reversed(s))))) for s in zip(*rails)]
# # # # # # buf = []
# # # # # # for line in range(Q):
# # # # # #     p, q = map(int, input().split())
# # # # # #     buf.append(rails[q - 1][p - 1])
# # # # # # print('\n'.join(map(str, buf)))

# # # # # # from itertools import accumulate

# # # # # # N,M,Q = map(int, input().split())
# # # # # # R = [[0]*(N) for _ in range(N)]
# # # # # # for i in range(M):
# # # # # #   l,r = map(int, input().split())
# # # # # #   R[l-1][r-1] += 1
# # # # # # R = [accumulate(r) for r in R]
# # # # # # R = [list(reversed(list(accumulate(reversed(r))))) for r in zip(*R)]
# # # # # # ans = []
# # # # # # for i in range(Q):
# # # # # #   p,q = map(int, input().split())
# # # # # #   ans.append(R[q-1][p-1])
# # # # # # for a in ans:
# # # # # #   print(a)

# # # # # # S = list(map(int, input().split()))
# # # # # # prev = 0
# # # # # # for s in S:
# # # # # #   if s < 100 or s > 675:
# # # # # #     print("No")
# # # # # #     exit()
# # # # # #   if s % 25 != 0:
# # # # # #     print("No")
# # # # # #     exit()
# # # # # #   if prev > s:
# # # # # #     print("No")
# # # # # #     exit()
# # # # # #   prev = s
# # # # # # print("Yes")

# # # # # # from collections import defaultdict
# # # # # # N,M = map(int, input().split())
# # # # # # C = list(input().split())
# # # # # # D = list(input().split())
# # # # # # Dd = defaultdict(int)
# # # # # # P = list(map(int, input().split()))
# # # # # # for i,d in enumerate(D):
# # # # # #   Dd[d] = P[i+1]
# # # # # # ans = 0
# # # # # # for c in C:
# # # # # #   if c not in Dd:
# # # # # #     ans += P[0]
# # # # # #   else:
# # # # # #     ans += Dd[c]
# # # # # # print(ans)

# # # # # # N = int(input())
# # # # # # tmp = []
# # # # # # for i in range(N):
# # # # # #   a,b = map(int, input().split())
# # # # # #   tmp.append((a/(a+b),i+1))
# # # # # # ans = []
# # # # # # tmp.sort(reverse=True)
# # # # # # tmps = [tmp[0][1]]
# # # # # # prev = tmp[0][0]
# # # # # # for i in range(1,N):
# # # # # #   t,j = tmp[i]
# # # # # #   if t == prev:
# # # # # #     tmps.append(j)
# # # # # #   else:
# # # # # #     prev = t
# # # # # #     tmps.sort()
# # # # # #     for tm in tmps:
# # # # # #       ans.append(tm)
# # # # # #     tmps = []
# # # # # #     tmps.append(j)
# # # # # # tmps.sort()
# # # # # # for tm in tmps:
# # # # # #   ans.append(tm)
# # # # # # print(*ans)

# # # # # # N = int(input())
# # # # # # X = []
# # # # # # for i in range(N):
# # # # # #     a, b = map(int, input().split())
# # # # # #     X.append((-a * 10 ** 100 // (a + b), i))
# # # # # # X.sort()
# # # # # # print(*[i + 1 for x, i in X])

# # # # # from collections import deque

# # # # # H,W = map(int, input().split())
# # # # # S = [input() for _ in range(H)]
# # # # # ans = ['s','n','u','k','e']
# # # # # moves = [(0,1),(0,-1),(1,0),(-1,0)]
# # # # # num = 0
# # # # # q = deque()
# # # # # q.append((0,0,num))
# # # # # if S[0][0] != 's':
# # # # #   print("No")
# # # # #   exit()
# # # # # done = [[False]*(W) for _ in range(H)]
# # # # # while q:
# # # # #   x,y,n = q.popleft()
# # # # #   if x == W-1 and y == H-1:
# # # # #     print("Yes")
# # # # #     exit()
# # # # #   done[y][x] = True
# # # # #   for xd,yd in moves:
# # # # #     if 0<= x+xd < W and 0<= y+yd <H:
# # # # #       if done[y+yd][x+xd]:
# # # # #         continue
# # # # #       if S[y+yd][x+xd] == ans[(n+1)%5]:
# # # # #         q.append((x+xd,y+yd,n+1))
# # # # # print("No")

# # # # # from itertools import accumulate
# # # # # H,W,K,V = map(int, input().split())
# # # # # A = []
# # # # # for i in range(H):
# # # # #   a = list(map(int, input().split()))
# # # # #   A.append(list(accumulate(a)))
# # # # # ans = 0
# # # # # for i in range(H):
# # # # #   for j in range(W):
# # # # #     for k in range(i,H):
# # # # #       for l in range(j,W):
# # # # #         num = (k-i+1)*(l-j+1)
# # # # #         v = A[]

# # # # # H, W, K, V = map(int, input().split())
# # # # # A = [list(map(int, input().split())) for _ in range(H)]

# # # # # csum = [[0]*(W + 1) for _ in range(H + 1)]
# # # # # for h in range(1, H + 1):
# # # # #   for w in range(1, W + 1):
# # # # #     csum[h][w] += csum[h - 1][w] + csum[h][w - 1] - csum[h - 1][w - 1]
# # # # #     csum[h][w] += A[h - 1][w - 1]
# # # # # print(csum)
# # # # # ans = 0
# # # # # for a in range(1, H + 1):
# # # # #   for b in range(1, W + 1):
# # # # #       for c in range(a, H + 1):
# # # # #           for d in range(b, W + 1):
# # # # #                 S = (c - a + 1) * (d - b + 1)
# # # # #                 v = csum[c][d] - csum[a - 1][d] - csum[c][b - 1] + csum[a - 1][b - 1]
# # # # #                 v += K * S
# # # # #                 if v <= V:
# # # # #                   ans = max(ans, S)
# # # # # print(ans)

# # # # # from itertools import accumulate

# # # # # N = int(input())
# # # # # C = [0]*(1000002)
# # # # # for i in range(N):
# # # # #   a,b = map(int, input().split())
# # # # #   C[a] += 1
# # # # #   C[b+1] -= 1
# # # # # C = list(accumulate(C))
# # # # # print(max(C))

# # # # # from itertools import accumulate

# # # # # while True:
# # # # #   N = int(input())
# # # # #   if N == 0:
# # # # #     exit()
# # # # #   H = [0]*(24*60*60)
# # # # #   for i in range(N):
# # # # #     e0,e1 = input().split()
# # # # #     h0,m0,s0 = map(int, e0.split(":"))
# # # # #     h1,m1,s1 = map(int, e1.split(":"))
# # # # #     t0 = h0*60*60+m0*60+s0
# # # # #     t1 = h1*60*60+m1*60+s1
# # # # #     H[t0] += 1
# # # # #     H[t1] -= 1
# # # # #   H = list(accumulate(H))
# # # # #   print(max(H))

# # # # # A,B = map(int, input().split())
# # # # # if A == 1 and B == 2:
# # # # #   print("Yes")
# # # # # elif A == 2 and B == 3:
# # # # #   print("Yes")
# # # # # elif A == 2 and B == 3:
# # # # #   print("Yes")
# # # # # elif A == 4 and B == 5:
# # # # #   print("Yes")
# # # # # elif A == 5 and B == 6:
# # # # #   print("Yes")
# # # # # elif A == 7 and B == 8:
# # # # #   print("Yes")
# # # # # elif A == 8 and B == 9:
# # # # #   print("Yes")
# # # # # else:
# # # # #   print("No")

# # # # # N = int(input())
# # # # # A = [list(input()) for _ in range(N)]
# # # # # for i in range(N):
# # # # #   tmp = ""
# # # # #   if i == 0:
# # # # #     tmp += A[1][0]
# # # # #     for a in A[0][:N-1]:
# # # # #       tmp += a
# # # # #   elif i == N-1:
# # # # #     for a in A[N-1][1:]:
# # # # #       tmp += a
# # # # #     tmp += A[N-2][-1]
# # # # #   else:
# # # # #     tmp += A[i+1][0]
# # # # #     for a in A[i][1:N-1]:
# # # # #       tmp += a
# # # # #     tmp += A[i-1][-1]
# # # # #   print(tmp)

# # # # # N,K = map(int, input().split())
# # # # # cnt = 0
# # # # # T = []
# # # # # for i in range(N):
# # # # #   a,b = map(int, input().split())
# # # # #   cnt += b
# # # # #   T.append((a,b))
# # # # # if cnt <= K:
# # # # #   print(1)
# # # # #   exit()
# # # # # T.sort()
# # # # # for a,b in T:
# # # # #   cnt -= b
# # # # #   if cnt <= K:
# # # # #     print(a+1)
# # # # #     exit()

# # # # from collections import deque

# # # # No,Ns,M = map(int, input().split())
# # # # connected = [[] for _ in range(No+Ns+1)]
# # # # Cnts = [0]*(No+Ns+1)
# # # # for i in range(M):
# # # #   a,b = map(int, input().split())
# # # #   connected[a].append(b)
# # # #   connected[b].append(a)
# # # # done = [False]*(No+Ns+1)
# # # # q = deque()
# # # # q.append((1,0))
# # # # done[1] = True
# # # # done[No+Ns] = True
# # # # while q:
# # # #   now,cnt = q.popleft()
# # # #   for to in connected[now]:
# # # #     if done[to]:
# # # #       continue
# # # #     done[to] = True
# # # #     Cnts[to] = cnt+1
# # # #     q.append((to,cnt+1))
# # # # q.append((No+Ns,0))
# # # # while q:
# # # #   now,cnt = q.popleft()
# # # #   for to in connected[now]:
# # # #     if done[to]:
# # # #       continue
# # # #     else:
# # # #       done[to] = True
# # # #       Cnts[to] = cnt+1
# # # #       q.append((to,cnt+1))
# # # # print(max(Cnts[:No+1])+max(Cnts[No+1:])+1)

# # # from collections import defaultdict

# # # class UnionFind():
# # #     """
# # #     Union Find木クラス

# # #     Attributes
# # #     --------------------
# # #     n : int
# # #         要素数
# # #     root : list
# # #         木の要素数
# # #         0未満であればそのノードが根であり、添字の値が要素数
# # #     rank : list
# # #         木の深さ
# # #     """

# # #     def __init__(self, n):
# # #         """
# # #         Parameters
# # #         ---------------------
# # #         n : int
# # #             要素数
# # #         """
# # #         self.n = n
# # #         self.root = [-1]*(n+1)
# # #         self.rank = [0]*(n+1)

# # #     def find(self, x):
# # #         """
# # #         ノードxの根を見つける

# # #         Parameters
# # #         ---------------------
# # #         x : int
# # #             見つけるノード

# # #         Returns
# # #         ---------------------
# # #         root : int
# # #             根のノード
# # #         """
# # #         if(self.root[x] < 0):
# # #             return x
# # #         else:
# # #             self.root[x] = self.find(self.root[x])
# # #             return self.root[x]

# # #     def unite(self, x, y):
# # #         """
# # #         木の併合

# # #         Parameters
# # #         ---------------------
# # #         x : int
# # #             併合したノード
# # #         y : int
# # #             併合したノード
# # #         """
# # #         x = self.find(x)
# # #         y = self.find(y)

# # #         if(x == y):
# # #             return
# # #         elif(self.rank[x] > self.rank[y]):
# # #             self.root[x] += self.root[y]
# # #             self.root[y] = x
# # #         else:
# # #             self.root[y] += self.root[x]
# # #             self.root[x] = y
# # #             if(self.rank[x] == self.rank[y]):
# # #                 self.rank[y] += 1

# # #     def same(self, x, y):
# # #         """
# # #         同じグループに属するか判定

# # #         Parameters
# # #         ---------------------
# # #         x : int
# # #             判定したノード
# # #         y : int
# # #             判定したノード

# # #         Returns
# # #         ---------------------
# # #         ans : bool
# # #             同じグループに属しているか
# # #         """
# # #         return self.find(x) == self.find(y)

# # #     def size(self, x):
# # #         """
# # #         木のサイズを計算

# # #         Parameters
# # #         ---------------------
# # #         x : int
# # #             計算したい木のノード

# # #         Returns
# # #         ---------------------
# # #         size : int
# # #             木のサイズ
# # #         """
# # #         return -self.root[self.find(x)]

# # #     def roots(self):
# # #         """
# # #         根のノードを取得

# # #         Returns
# # #         ---------------------
# # #         roots : list
# # #             根のノード
# # #         """
# # #         return [i for i, x in enumerate(self.root) if x < 0]

# # #     def group_size(self):
# # #         """
# # #         グループ数を取得

# # #         Returns
# # #         ---------------------
# # #         size : int
# # #             グループ数
# # #         """
# # #         return len(self.roots())

# # #     def group_members(self):
# # #         """
# # #         全てのグループごとのノードを取得

# # #         Returns
# # #         ---------------------
# # #         group_members : defaultdict
# # #             根をキーとしたノードのリスト
# # #         """
# # #         group_members = defaultdict(list)
# # #         for member in range(self.n):
# # #             group_members[self.find(member)].append(member)
# # #         return group_members

# # # N,M = map(int, input().split())
# # # P = list(map(int, input().split()))
# # # uf = UnionFind(N)
# # # for i,p in enumerate(P):
# # #   uf.unite(p,i+2)
# # # print(list(uf))

# # # from itertools import accumulate

# # # N,M = map(int, input().split())
# # # P = list(map(int, input().split()))
# # # C = [0]*(N+1)
# # # now = P[0]
# # # for to in P[1:]:
# # #   C[min(now,to)] += 1
# # #   C[max(now,to)] -= 1
# # #   now = to
# # # C = list(accumulate(C))
# # # ans = 0
# # # for i in range(1,N):
# # #   a,b,c = map(int, input().split())
# # #   ans += min(a*C[i],c+b*C[i])
# # # print(ans)

# # # from itertools import accumulate

# # # N,M = map(int, input().split())
# # # C = [[0]*(i+2) for i in range(N)]
# # # for i in range(M):
# # #   a,b,x = map(int, input().split())
# # #   for j in range(a-1,a+x):
# # #     C[j][b-1] += 1
# # #     C[j][b+(j-(a-1))] -= 1
# # # Cn = []
# # # for c in C:
# # #   Cn.append(list(accumulate(c)))
# # # ans = 0
# # # for cl in Cn:
# # #   for c in cl:
# # #     if c > 0:
# # #       ans += 1
# # # print(ans)

# # # ans = []
# # # N,Q = map(int, input().split())
# # # uf = UnionFind(N)
# # # for i in range(Q):
# # #   c,x,y = map(int,input().split())
# # #   if c == 0:
# # #     uf.unite(x,y)
# # #   else:
# # #     ans.append(uf.same(x,y))
# # # for a in ans:
# # #   if a:
# # #     print(1)
# # #   else:
# # #     print(0)

# # # N,P,Q = map(int, input().split())
# # # D = list(map(int, input().split()))
# # # print(min(P,min(D)+Q))

# # # N,M = map(int, input().split())
# # # Items = []
# # # for i in range(N):
# # #   tmp = []
# # #   p,c,*F = list(map(int, input().split()))
# # #   tmp.append(p)
# # #   for f in F:
# # #     tmp.append(f)
# # #   Items.append(tmp)
# # # for i in range(N):
# # #   for j in range(N):
# # #     if Items[i][0] >= Items[j][0]:
# # #       and_list = set(Items[i][1:]) & set(Items[j][1:])
# # #       if list(and_list) == Items[i][1:]:
# # #         if Items[i][0] > Items[j][0]:
# # #           print("Yes")
# # #           exit()
# # #         or_list = set(Items[i][1:]) ^ set(Items[j][1:])
# # #         if or_list:
# # #           print("Yes")
# # #           exit()
# # # print("No")

# # # N = int(input())
# # # done = set()
# # # ans = 0
# # # for i in range(N):
# # #   S = input()
# # #   if S in done or S[::-1] in done:
# # #     ans += 1 
# # #   else:
# # #     done.add(S)
# # # print(N-ans)

# # # from collections import defaultdict

# # # class UnionFind():
# # #     """
# # #     Union Find木クラス

# # #     Attributes
# # #     --------------------
# # #     n : int
# # #         要素数
# # #     root : list
# # #         木の要素数
# # #         0未満であればそのノードが根であり、添字の値が要素数
# # #     rank : list
# # #         木の深さ
# # #     """

# # #     def __init__(self, n):
# # #         """
# # #         Parameters
# # #         ---------------------
# # #         n : int
# # #             要素数
# # #         """
# # #         self.n = n
# # #         self.root = [-1]*(n+1)
# # #         self.rank = [0]*(n+1)

# # #     def find(self, x):
# # #         """
# # #         ノードxの根を見つける

# # #         Parameters
# # #         ---------------------
# # #         x : int
# # #             見つけるノード

# # #         Returns
# # #         ---------------------
# # #         root : int
# # #             根のノード
# # #         """
# # #         if(self.root[x] < 0):
# # #             return x
# # #         else:
# # #             self.root[x] = self.find(self.root[x])
# # #             return self.root[x]

# # #     def unite(self, x, y):
# # #         """
# # #         木の併合

# # #         Parameters
# # #         ---------------------
# # #         x : int
# # #             併合したノード
# # #         y : int
# # #             併合したノード
# # #         """
# # #         x = self.find(x)
# # #         y = self.find(y)

# # #         if(x == y):
# # #             return
# # #         elif(self.rank[x] > self.rank[y]):
# # #             self.root[x] += self.root[y]
# # #             self.root[y] = x
# # #         else:
# # #             self.root[y] += self.root[x]
# # #             self.root[x] = y
# # #             if(self.rank[x] == self.rank[y]):
# # #                 self.rank[y] += 1

# # #     def same(self, x, y):
# # #         """
# # #         同じグループに属するか判定

# # #         Parameters
# # #         ---------------------
# # #         x : int
# # #             判定したノード
# # #         y : int
# # #             判定したノード

# # #         Returns
# # #         ---------------------
# # #         ans : bool
# # #             同じグループに属しているか
# # #         """
# # #         return self.find(x) == self.find(y)

# # #     def size(self, x):
# # #         """
# # #         木のサイズを計算

# # #         Parameters
# # #         ---------------------
# # #         x : int
# # #             計算したい木のノード

# # #         Returns
# # #         ---------------------
# # #         size : int
# # #             木のサイズ
# # #         """
# # #         return -self.root[self.find(x)]

# # #     def roots(self):
# # #         """
# # #         根のノードを取得

# # #         Returns
# # #         ---------------------
# # #         roots : list
# # #             根のノード
# # #         """
# # #         return [i for i, x in enumerate(self.root) if x < 0]

# # #     def group_size(self):
# # #         """
# # #         グループ数を取得

# # #         Returns
# # #         ---------------------
# # #         size : int
# # #             グループ数
# # #         """
# # #         return len(self.roots())

# # #     def group_members(self):
# # #         """
# # #         全てのグループごとのノードを取得

# # #         Returns
# # #         ---------------------
# # #         group_members : defaultdict
# # #             根をキーとしたノードのリスト
# # #         """
# # #         group_members = defaultdict(list)
# # #         for member in range(self.n):
# # #             group_members[self.find(member)].append(member)
# # #         return group_members

# # # N, M = map(int, input().split())
# # # bridge = [list(map(int, input().split())) for _ in range(M)]
# # # ans = [0]*M
# # # uf = UnionFind(N)

# # # # うしろからつないでいく
# # # ans[M-1] = N*(N-1)//2
# # # print(ans)
# # # for i in range(M-2, -1, -1):
# # #     A, B = bridge[i+1]
# # #     if uf.same(A-1, B-1):
# # #         ans[i] = ans[i+1]
# # #     else:
# # #         ans[i] = ans[i+1] - uf.group_size(A-1) * uf.group_size(B-1)
# # #     uf.unite(A-1, B-1)

# # # for a in ans:
# # #     print(a)

# # class UnionFind:
# #     def __init__(self, n):
# #         self.n = n
# #         self.parent = [i for i in range(n)]  # 親
# #         self.rank = [1] * n  # 木の高さ
# #         self.size = [1] * n  # size[i] は i を根とするグループのサイズ

# #     def find(self, x):  # x の根を返す
# #         if self.parent[x] == x:
# #             return x
# #         else:
# #             self.parent[x] = self.find(self.parent[x])  # 経路圧縮
# #             return self.parent[x]

# #     def unite(self, x, y):  # x, y の属する集合を併合する
# #         x = self.find(x)
# #         y = self.find(y)
# #         if x != y:
# #             if self.rank[x] < self.rank[y]:
# #                 self.parent[x] = y
# #                 self.size[y] += self.size[x]
# #             else:
# #                 self.parent[y] = x
# #                 self.size[x] += self.size[y]
# #                 if self.rank[x] == self.rank[y]:
# #                     self.rank[x] += 1

# #     def is_same(self, x, y):  # x, y が同じ集合に属するか判定する
# #         return self.find(x) == self.find(y)

# #     def group_size(self, x):  # x が属する集合の大きさを返す
# #         return self.size[self.find(x)]

# #     def __str__(self):  # print 表示用
# #         return '\n'.join('{}: {}'.format(r, self.group_members(r)) for r in self.roots())


# # N, M = map(int, input().split())
# # bridge = [list(map(int, input().split())) for _ in range(M)]
# # ans = [0]*M
# # uf = UnionFind(N)

# # # うしろからつないでいく
# # ans[M-1] = N*(N-1)//2
# # for i in range(M-2, -1, -1):
# #     A, B = bridge[i+1]
# #     if uf.is_same(A-1, B-1):
# #         ans[i] = ans[i+1]
# #     else:
# #         ans[i] = ans[i+1] - uf.group_size(A-1) * uf.group_size(B-1)
# #     uf.unite(A-1, B-1)

# # for a in ans:
# #     print(a)

# # N = int(input())
# # C = []
# # for n in range(N):
# #     c = int(input())
# #     C.append(c)

# # stack = []
# # old = None
# # for n in range(N):
# #     c = C[n]
# #     if (n%2==1): # iが偶数の場合（nが奇数）
# #         if old != c: # 色が異なれば
# #             stack.pop() # 反転させる（最後の反対色の記録を取り除く）
# #             if len(stack)==0: # スタックを空にしない
# #                 stack.append(0)
# #     else:
# #         if old != c: # 違う色が出た時
# #             stack.append(n) # 色の始まりを記録する
# #     old = c
# #     print(stack)
# # if old == 0: # スタック上の記録では、白黒は交互に格納されているので最後が白なら
# #     stack.append(n+1) # n+1を格納しておく。これは、後ほどストライド2で差分を計算するため
# # if len(stack)%2 == 1:
# #     stack.insert(0,0) # ストライド2で差分を計算するため、要素数を偶数にする
# # print(stack)
# # print (sum(stack[1::2]) - sum(stack[::2]))

# # N = int(input())
# # S = input()
# # done = [False]*(3)
# # for i,s in enumerate(S):
# #     if s == "A":
# #         done[0] = True
# #         if not False in done:
# #             print(i+1)
# #             exit()
# #     elif s == "B":
# #         done[1] = True
# #         if not False in done:
# #             print(i+1)
# #             exit()
# #     elif s == "C":
# #         done[2] = True
# #         if not False in done:
# #             print(i+1)
# #             exit()

# # N,D = map(int, input().split())
# # S = [[] for _ in range(D)]
# # for i in range(N):
# #     s = list(input())
# #     for i in range(D):
# #         S[i].append(s[i])
# # ans = 0
# # tmp = 0
# # for i in range(D):
# #     if S[i].count("o") == N:
# #         tmp += 1
# #     else:
# #         ans = max(ans,tmp)
# #         tmp = 0
# # ans = max(ans,tmp)
# # print(ans)

# # from collections import deque

# # N = int(input())
# # connected = [[] for _ in range(N+1)]
# # for i,b in enumerate(list(map(int, input().split()))):
# #     connected[i+1].append(b)
# # ans = []
# # done = [False]*(N+1)
# # q = deque()
# # q.append(1)
# # ov = None
# # while q:
# #     now = q.popleft()
# #     if done[now]:
# #         ov = now
# #         break
# #     done[now] = True
# #     ans.append(now)
# #     for c in connected[now]:
# #         q.append(c)
# # idx = ans.index(ov)
# # ans = ans[idx:]
# # print(len(ans))
# # print(*ans)

# # import math
# # INF = 1<<60
# # N,M = map(int, input().split())
# # Rc = [list(map(int, input().split())) for _ in range(N)]
# # C = [list(map(int, input().split())) for _ in range(M)]
# # ans = INF
# # if M == 0:
# #     for x,y,r in Rc:
# #         ans = min(ans,r)
# # for i in range(M):
# #     for j in range(i+1,M):
# #         diffs = math.sqrt(abs(C[j][0]-C[i][0])**2+abs(C[j][1]-C[i][1])**2)
# #         ans = min(ans, diffs/2)
# # for xr,xy,r in Rc:
# #     for x,y in C:
# #         diffs = math.sqrt(abs(xr-x)**2+abs(xy-y)**2)
# #         ans = min(ans, diffs-r)
# # print(ans)

# N,M = map(int, input().split())
# S = [list(input()) for _ in range(N)]
# ans = []
# for i in range(N):
#     for j in range(M):
#         if S[i][j] == '#':
#             flag = True
#             for k in range(3):
#                 if not flag:
#                     break
#                 for l in range(3):
#                     if S[i+k][j+l] != '#':
#                         flag = False
#                         break
#             flag2 = True
#             for k in range(7,10):
#                 if not flag2:
#                     break
#                 for l in range(7,10):
#                     if S[i+k][j+l] != '#':
#                         flag = False
#                         break
#             flag3 = True
#             for k in range(3):
#                 if S[i+3][j+k] != '.':
#                     flag3 = False
#                     break
#             flag4 = True
#             for k in range(4):
#                 if S[i+k][j+3] != '.':
#                     flag4 = False
#                     break
#             flag5 = True
#             for k in range(5,9):
#                 if S[i+5][j+k] != '.':
#                     flag5 = False
#                     break
#             flag6 = True
#             for k in range(6,9):
#                 if S[i+k][j+5]:
#                     flag6 = True
#                     break
#             if flag and flag2 and flag3 and flag4 and flag5 and flag6:
#                 ans.append((i+1,j+1))
# print(ans)

# N,M = map(int,input().split())
# S = [input() for i in range(N)]

# for i in range(N-8):
# 	for j in range(M-8):
# 		if S[i][j:j+4] != '###.':
# 			continue
# 		if S[i+1][j:j+4] != '###.':
# 			continue
# 		if S[i+2][j:j+4] != '###.':
# 			continue
# 		if S[i+3][j:j+4] != '....':
# 			continue
# 		if S[i+5][j+5:j+9] != '....':
# 			continue
# 		if S[i+6][j+5:j+9] != '.###':
# 			continue
# 		if S[i+7][j+5:j+9] != '.###':
# 			continue
# 		if S[i+8][j+5:j+9] != '.###':
# 			continue
# 		print(*[i+1,j+1])

# import bisect
# INF = 1<<60
# N,M = map(int, input().split())
# A = sorted(list(map(int, input().split())))
# B = sorted(list(map(int, input().split())))
# ans = INF
# for i,a in enumerate(A):
#     idx = bisect.bisect_left(B,a)
#     if i+1 >= M-idx:
#         ans = min(ans, a)
# if min(A) > max(B):
#     ans = min(ans, B[-1]+1)
# print(ans)

# while True:
#     N = int(input())
#     if N == 0:
#         exit()
#     lis = [list(map(int, input().split())) for _ in range(N)]
#     ans = 0
#     while True:
#         for i in range(N):
#             if len(lis[i]) < 3:
#                 continue
#             lang = 1
#             for j in range(len(lis[i])):
#                 if j+lang < len(lis[i]) and lis[i][j] == lis[i][j+lang]:
#                     lang += 1
#                 else:
#                     if lang > 2:
#                     lang = 1

# from copy import deepcopy

# H,W,K = map(int, input().split())
# board = [[] for _ in range(H)]
# for i in range(H):
#     C = input()
#     for c in C:
#         board[i].append(int(c))
# ans = 0
# for i in range(H):
#     for j in range(W):
#         A = deepcopy(board)
#         A[i][j] = 0
#         fall(H,W,A)

# N = int(input())
# P = list(map(int, input().split()))
# Pso = sorted(P)
# if Pso[-1] == P[0] and Pso[-2] != Pso[-1]:
#     print(0)
# else:
#     print(Pso[-1]-P[0]+1)

# from collections import deque
# N,M = map(int, input().split())
# connected = [[] for _ in range(N+1)]
# for i in range(M):
#     a,b = map(int, input().split())
#     connected[a].append(b)
# ans = -1
# for i in range(1,N+1):
#     q = deque()
#     done = [False]*(N+1)
#     done[0] = True
#     done[i] = True
#     q.append(i)
#     while q:
#         now = q.popleft()
#         if False not in done:
#             if ans == -1:
#                 ans = i
#                 break
#             else:
#                 print(-1)
#                 exit()
#         for n in connected[now]:
#             if done[n]:
#                 continue
#             done[n] = True
#             q.append(n)
# print(ans)

# N = int(input())
# A = list(map(int, input().split()))
# total = sum(A)
# avg = total // N
# Fin = [avg]*(N)
# for i in range(total % avg):
#     Fin[i] += 1
# A.sort(reverse=True)
# ans = 0
# for i in range(N):
#     if A[i] - Fin[i] > 0:
#         ans += A[i] - Fin[i]
# print(ans)

# A,B,K = map(int, input().split())
# if A <= K:
#     K -= A
#     A = 0
# else:
#     A -= K
#     print(A,B)
#     exit()
# if B <= K:
#     print(0,0)
#     exit()
# else:
#     B -= K
#     print(A,B)
#     exit()

# N = int(input())
# ans = "3.1415926535897932384626433832795028841971693993751058209749445923078164062862089986280348253421170679"
# print(ans[:N+2])

# N = int(input())
# nums = []
# picks = []
# for i in range(N):
#     C = int(input())
#     nums.append(C)
#     A = set(list(map(int, input().split())))
#     picks.append(A)
# X = int(input())
# inte = []
# numss = []
# for i in range(N):
#     tmp = []
#     if X in picks[i]:
#         inte.append(i+1)
#         numss.append(nums[i])
# if len(numss) != 0:
#     mins = min(numss)
# ans = []
# for i in range(len(numss)):
#     if numss[i] == mins:
#         ans.append(inte[i])
# print(len(ans))
# print(*sorted(ans))

# N,M = map(int, input().split())
# S = list(input())
# C = list(map(int, input().split()))
# Ps = [[] for _ in range(M)]
# for i,c in enumerate(C):
#     Ps[c-1].append(i)
# ans = ["."]*N
# for i in range(M):
#     for j in range(len(Ps[i])):
#         ans[Ps[i][(j+1)%len(Ps[i])]] = S[Ps[i][j]]
# print(''.join(ans))

# N = int(input())
# S = list(input())
# Q = int(input())
# switch = None
# exp = []
# for i in range(Q):
#     t,x,c = input().split()
#     if t == "1":
#         S[int(x)-1] = c
#         exp.append((int(x)-1,c))
#     elif t == "2":
#         switch = False
#         exp = []
#     else:
#         switch = True
#         exp = []
# ans = ''.join(S)
# if switch == True:
#     ans = list(ans.upper())
#     for x,c in exp:
#         ans[x] = c
#     print(''.join(ans))
#     exit()
# elif switch == False:
#     ans = list(ans.lower())
#     for x,c in exp:
#         ans[x] = c
#     print(''.join(ans))
#     exit()
# else:
#     print(ans)
#     exit()

# N = int(input())
# print((N-1)*N//2)

# MOD = 1000000007
# N = int(input())
# A = list(map(int, input().split()))
# done = [0]*(N+1)
# ans = 1
# done[0] = 3
# for i in range(N):
#     ans *= done[A[i]]
#     ans %= MOD
#     done[A[i]] -= 1
#     done[A[i]+1] += 1
# print(ans%MOD)

# M = int(input())
# total = 0
# digs = 0
# for i in range(M):
#     d,c = map(int, input().split())
#     total += d*c
#     digs += c
# print((digs-1)+(total-1)//9)

# def check(n):
#     i = 1
#     while n > 0:
#         n -= i
#         if n == 0:
#             return i
#         i += 1
#     return False

# def solve(n):
#     k = check(n)
#     if k == False:
#         print('No')
#         return
#     buf = [[k] + [0] * k for _ in range(k + 1)]
#     t = k
#     u = 1
#     for i in range(k):
#         buf[i][i + 1:i + t + 1] = list(range(u, u + t))
#         for j in range(t):
#             buf[i + j + 1][i + 1] = u + j
#         u += t
#         t -= 1
#     print('Yes')
#     print(k + 1)
#     print('\n'.join(' '.join(map(str, b)) for b in buf))
    
# n = int(input())
# solve(n)

# N,M = map(int, input().split())
# connected = [[0]*(N+1) for _ in range(N+1)]
# for i in range(M):
#     a,b,c = map(int,input().split())
#     connected[a][b] = c
#     connected[b][a] = c
# ans = 0
# visited = [False]*(N+1)
# def dfs(v,s):
#     global ans
#     visited[v] = True
#     if s > ans:
#         ans = s
#     for i in range(1, N+1):
#         if not visited[i] and connected[v][i]:
#             dfs(i, s+connected[v][i])
#     visited[v] = False
# for i in range(1,N+1):
#     dfs(i,0)
# print(ans)

# N = int(input())
# P = list(map(int, input().split()))
# if max(P)==P[0] and P.count(P[0]) == 1:
#     print(0)
# else:
#     print(max(P)-P[0]+1)

# from collections import deque
# N,M = map(int, input().split())
# connected = [[] for _ in range(N+1)]
# for i in range(M):
#     a,b = map(int, input().split())
#     connected[a].append(b)
# ans = -1
# for i in range(1,N+1):
#     q = deque()
#     done = [False]*(N+1)
#     done[0] = True
#     done[i] = True
#     q.append(i)
#     while q:
#         now = q.popleft()
#         if False not in done:
#             if ans == -1:
#                 ans = i
#                 break
#             else:
#                 print(-1)
#                 exit()
#         for n in connected[now]:
#             if done[n]:
#                 continue
#             done[n] = True
#             q.append(n)
# print(ans)

print("hello world")